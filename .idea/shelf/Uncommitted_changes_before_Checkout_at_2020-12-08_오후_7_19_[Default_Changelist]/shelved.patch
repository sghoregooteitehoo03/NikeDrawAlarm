Index: app/src/main/java/com/nikealarm/nikedrawalarm/component/worker/FindDrawWorker.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.nikealarm.nikedrawalarm.component.worker\r\n\r\nimport android.app.NotificationChannel\r\nimport android.app.NotificationManager\r\nimport android.app.PendingIntent\r\nimport android.content.Context\r\nimport android.content.Intent\r\nimport android.os.Build\r\nimport androidx.core.app.NotificationCompat\r\nimport androidx.core.app.NotificationManagerCompat\r\nimport androidx.hilt.Assisted\r\nimport androidx.hilt.work.WorkerInject\r\nimport androidx.work.Worker\r\nimport androidx.work.WorkerParameters\r\nimport com.nikealarm.nikedrawalarm.R\r\nimport com.nikealarm.nikedrawalarm.database.*\r\nimport com.nikealarm.nikedrawalarm.other.Contents\r\nimport com.nikealarm.nikedrawalarm.ui.MainActivity\r\nimport com.squareup.picasso.Picasso\r\nimport org.jsoup.Jsoup\r\n\r\nclass FindDrawWorker @WorkerInject constructor(\r\n    @Assisted context: Context,\r\n    @Assisted workerParams: WorkerParameters,\r\n    val mDao: Dao\r\n) : Worker(\r\n    context,\r\n    workerParams\r\n) {\r\n    private val mContext = context\r\n\r\n    private val allShoesList = mutableListOf<ShoesDataModel>()\r\n\r\n    override fun doWork(): Result {\r\n        parseData()\r\n\r\n        return Result.success()\r\n    }\r\n\r\n    // 크롤링\r\n    private fun parseData() {\r\n        parseReleasedData()\r\n        parseSpecialData()\r\n\r\n        checkSpecialData()\r\n    }\r\n\r\n    // FEED 파싱\r\n    private fun parseReleasedData() {\r\n        val url = \"https://www.nike.com/kr/launch/\"\r\n        val doc = Jsoup.connect(url) // nike UPCOMING 창을 읽어옴\r\n            .userAgent(\"19.0.1.84.52\")\r\n            .get()\r\n        val elementsData = doc.select(\"li.launch-list-item\")\r\n\r\n        for (elementData in elementsData) {\r\n            val shoesInfo = elementData.select(\"div.info-sect\") // 신발 정보\r\n                .select(\"div.btn-box\")\r\n                .select(\"span\")\r\n                .text()\r\n\r\n            if (shoesInfo == \"LEARN MORE\") {\r\n                continue\r\n            }\r\n\r\n            val shoesSubTitle = elementData.select(\"div.text-box\")\r\n                .select(\"p.txt-subject\")\r\n                .text()\r\n            val shoesTitle = elementData.select(\"div.text-box\")\r\n                .select(\"p.txt-description\")\r\n                .text()\r\n            val innerUrl = \"https://www.nike.com\" + elementData.select(\"a\")\r\n                .attr(\"href\") // 해당 draw 링크창을 읽어옴\r\n\r\n            // draw가 없을 시\r\n            if (!mDao.existsShoesData(shoesTitle, shoesSubTitle, innerUrl)) {\r\n                if (shoesInfo == \"THE DRAW 진행예정\") {\r\n                    val innerDoc = Jsoup.connect(innerUrl)\r\n                        .userAgent(\"19.0.1.84.52\")\r\n                        .get()\r\n\r\n                    // 신발 정보를 가져옴\r\n                    val shoesPrice = \"가격 : \" + innerDoc.select(\"div.price\") // draw 신발 가격\r\n                        .text()\r\n                    val shoesImageUrl = innerDoc.select(\"li.uk-width-1-2\") // draw 신발 이미지\r\n                        .select(\"img\")\r\n                        .eq(0)\r\n                        .attr(\"src\")\r\n\r\n                    val innerElementData = innerDoc.select(\"span.uk-text-bold\")\r\n\r\n                    var howToEvent = \"\" // 이벤트 참여방법\r\n                    for (j in 0..2) {\r\n                        howToEvent += innerElementData.select(\"p\")\r\n                            .eq(j)\r\n                            .text() + \"\\n\"\r\n                    }\r\n\r\n                    howToEvent += shoesPrice\r\n\r\n                    val shoesData =\r\n                        ShoesDataModel(\r\n                            null,\r\n                            shoesSubTitle,\r\n                            shoesTitle,\r\n                            howToEvent,\r\n                            shoesImageUrl,\r\n                            innerUrl,\r\n                            ShoesDataModel.CATEGORY_DRAW\r\n                        )\r\n\r\n                    insertShoesData(shoesData)\r\n                }\r\n            }\r\n\r\n            allShoesList.add(ShoesDataModel(0, shoesSubTitle, shoesTitle, null, null, innerUrl))\r\n        }\r\n    }\r\n\r\n    // UPCOMING 파싱\r\n    private fun parseSpecialData() {\r\n        val url = \"https://www.nike.com/kr/launch/?type=upcoming&activeDate=date-filter:AFTER\"\r\n        val doc = Jsoup.connect(url) // nike UPCOMING창을 읽어옴\r\n            .userAgent(\"19.0.1.84.52\")\r\n            .get()\r\n        val elementsData = doc.select(\"li.launch-list-item\")\r\n        var channelId = 0\r\n\r\n        for (elementData in elementsData) {\r\n            val category = elementData.select(\"div.info-sect\")\r\n                .select(\"div.btn-box\")\r\n                .select(\"span.btn-link\")\r\n                .text()\r\n            val specialUrl = \"https://www.nike.com\" + elementData.select(\"a\").attr(\"href\")\r\n\r\n            if (category != \"THE DRAW 진행예정\" || mDao.existsSpecialData(specialUrl)) { // DRAW가 아니고 이미 데이터가 존재할 시\r\n                continue\r\n            }\r\n\r\n            val month = elementData.select(\"div.img-sect\")\r\n                .select(\"div.date\")\r\n                .select(\"span.month\")\r\n                .text()\r\n            val day = elementData.select(\"div.img-sect\")\r\n                .select(\"div.date\")\r\n                .select(\"span.day\")\r\n                .text()\r\n            val whenStartEvent = elementData.select(\"div.info-sect\")\r\n                .select(\"div.text-box\")\r\n                .select(\"p.txt-subject\")\r\n                .text()\r\n            val order = \"${month.split(\"월\")[0]}${day}\".toInt()\r\n\r\n            val specialShoesData = SpecialDataModel(\r\n                null,\r\n                specialUrl,\r\n                month,\r\n                day,\r\n                whenStartEvent,\r\n                order\r\n            )\r\n\r\n            insertSpecialShoesData(specialShoesData)\r\n\r\n            val index = mDao.getAllSpecialShoesData()\r\n                .indexOf(SpecialShoesDataModel(0, \"\", \"\", null, null, specialUrl))\r\n            createNotification(mDao.getAllSpecialShoesData()[index], channelId)\r\n\r\n            channelId++\r\n        }\r\n    }\r\n\r\n    // 알림 생성\r\n    private fun createNotification(data: SpecialShoesDataModel, channelId: Int) {\r\n        val vibrate = LongArray(4).apply {\r\n            set(0, 0)\r\n            set(1, 100)\r\n            set(2, 200)\r\n            set(3, 300)\r\n        }\r\n\r\n        // 자세히 보기\r\n        val learnMoreIntent = Intent(mContext, MainActivity::class.java).apply {\r\n            action = Contents.INTENT_ACTION_GOTO_WEBSITE\r\n            putExtra(Contents.CHANNEL_ID, channelId)\r\n            putExtra(Contents.DRAW_URL, data.ShoesUrl)\r\n        }\r\n        val setAlarmIntent = Intent(mContext, MainActivity::class.java).apply { // 알림 설정하기\r\n            action = Contents.INTENT_ACTION_GOTO_DRAWLIST\r\n        }\r\n\r\n        val learnMorePendingIntent = PendingIntent.getActivity(\r\n            mContext,\r\n            channelId,\r\n            learnMoreIntent,\r\n            PendingIntent.FLAG_ONE_SHOT\r\n        )\r\n        val setAlarmPendingIntent =\r\n            PendingIntent.getActivity(mContext, 100, setAlarmIntent, PendingIntent.FLAG_ONE_SHOT)\r\n\r\n        val bitmap = Picasso.get().load(data.ShoesImageUrl).get()\r\n        val notificationBuilder = NotificationCompat.Builder(mContext, \"Default\")\r\n            .setSmallIcon(R.mipmap.ic_launcher)\r\n            .setContentTitle(\"${data.ShoesSubTitle} - ${data.ShoesTitle}\")\r\n            .setVibrate(vibrate)\r\n            .setLargeIcon(bitmap)\r\n            .setStyle(NotificationCompat.BigTextStyle())\r\n            .setStyle(\r\n                NotificationCompat.BigPictureStyle()\r\n                    .bigPicture(bitmap)\r\n                    .bigLargeIcon(null)\r\n            )\r\n            .setContentText(data.ShoesPrice!!.split(\"\\n\")[0])\r\n            .setAutoCancel(true)\r\n            .addAction(0, \"자세히 보기\", learnMorePendingIntent)\r\n            .addAction(0, \"알림 설정하기\", setAlarmPendingIntent)\r\n\r\n        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.O) {\r\n            val channel = NotificationChannel(\r\n                \"Default\",\r\n                data.ShoesTitle,\r\n                NotificationManager.IMPORTANCE_DEFAULT\r\n            )\r\n            val notificationManager =\r\n                mContext.getSystemService(Context.NOTIFICATION_SERVICE) as NotificationManager\r\n\r\n            notificationManager.createNotificationChannel(channel)\r\n        }\r\n\r\n        with(NotificationManagerCompat.from(mContext)) {\r\n            notify(channelId, notificationBuilder.build())\r\n        }\r\n    }\r\n\r\n    // 데이터베이스 접근\r\n    private fun insertSpecialShoesData(insertData: SpecialDataModel) {\r\n        mDao.insertSpecialData(insertData)\r\n    }\r\n\r\n    private fun insertShoesData(insertData: ShoesDataModel) {\r\n        mDao.insertShoesData(insertData)\r\n    }\r\n\r\n    private fun checkSpecialData() {\r\n        for (shoesData in mDao.getAllSpecialShoesData()) {\r\n            if (!allShoesList.contains(\r\n                    ShoesDataModel(\r\n                        0,\r\n                        shoesData.ShoesSubTitle,\r\n                        shoesData.ShoesTitle\r\n                    )\r\n                ) && shoesData.ShoesCategory == ShoesDataModel.CATEGORY_DRAW\r\n            ) {\r\n                deleteShoesData(shoesData)\r\n            }\r\n        }\r\n    }\r\n\r\n    private fun deleteShoesData(deleteData: SpecialShoesDataModel) {\r\n        mDao.deleteShoesData(deleteData.ShoesTitle, deleteData.ShoesSubTitle)\r\n        mDao.deleteSpecialData(deleteData.ShoesUrl!!)\r\n    }\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/com/nikealarm/nikedrawalarm/component/worker/FindDrawWorker.kt	(revision 42d2ae237284f29b00ed23e9239f54ba7cb8edbc)
+++ app/src/main/java/com/nikealarm/nikedrawalarm/component/worker/FindDrawWorker.kt	(date 1607422680464)
@@ -123,7 +123,11 @@
         val doc = Jsoup.connect(url) // nike UPCOMING창을 읽어옴
             .userAgent("19.0.1.84.52")
             .get()
+<<<<<<< HEAD
         val elementsData = doc.select("li.launch-list-item")
+=======
+        val elementsData = doc.select("ls.launch-list-item")
+>>>>>>> release
         var channelId = 0
 
         for (elementData in elementsData) {
@@ -133,7 +137,7 @@
                 .text()
             val specialUrl = "https://www.nike.com" + elementData.select("a").attr("href")
 
-            if (category != "THE DRAW 진행예정" || mDao.existsSpecialData(specialUrl)) { // DRAW가 아니고 이미 데이터가 존재할 시
+            if (category != "THE DRAW 진행예정" || mDao.existsSpecialData(specialUrl)) { // DRAW가 아니거나 이미 데이터가 존재할 시
                 continue
             }
 
