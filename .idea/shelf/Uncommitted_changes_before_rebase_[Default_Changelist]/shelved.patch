Index: app/src/main/java/com/nikealarm/nikedrawalarm/ui/fragment/MainWebFragment.kt
===================================================================
--- app/src/main/java/com/nikealarm/nikedrawalarm/ui/fragment/MainWebFragment.kt	(revision b3f4dce6bbc1f64b2f120ac4dc054823810b53e9)
+++ app/src/main/java/com/nikealarm/nikedrawalarm/ui/fragment/MainWebFragment.kt	(revision b3f4dce6bbc1f64b2f120ac4dc054823810b53e9)
@@ -1,104 +0,0 @@
-package com.nikealarm.nikedrawalarm.ui.fragment
-
-import android.os.Bundle
-import android.view.*
-import androidx.fragment.app.Fragment
-import android.webkit.WebChromeClient
-import android.webkit.WebView
-import android.webkit.WebViewClient
-import android.widget.ProgressBar
-import androidx.activity.OnBackPressedCallback
-import androidx.appcompat.widget.Toolbar
-import androidx.lifecycle.ViewModelProvider
-import androidx.navigation.fragment.findNavController
-import androidx.swiperefreshlayout.widget.SwipeRefreshLayout
-import com.nikealarm.nikedrawalarm.R
-import com.nikealarm.nikedrawalarm.ui.MainActivity
-import com.nikealarm.nikedrawalarm.viewmodel.MyViewModel
-
-class MainWebFragment : Fragment() {
-    private lateinit var mainWebView: WebView
-    private lateinit var mainProgress: ProgressBar
-    private lateinit var mainWebRefresh: SwipeRefreshLayout
-
-    private lateinit var mViewModel: MyViewModel
-
-    override fun onCreateView(
-        inflater: LayoutInflater, container: ViewGroup?,
-        savedInstanceState: Bundle?
-    ): View? {
-        // Inflate the layout for this fragment
-
-        activity?.onBackPressedDispatcher?.addCallback(backPressedCallback)
-        setHasOptionsMenu(true)
-
-        return inflater.inflate(R.layout.fragment_web, container, false)
-    }
-
-    // 시작
-    override fun onViewCreated(view: View, savedInstanceState: Bundle?) {
-        super.onViewCreated(view, savedInstanceState)
-
-        val toolbar = view.findViewById<Toolbar>(R.id.webFrag_toolbar).apply {
-            (activity as MainActivity).setSupportActionBar(this)
-            (activity as MainActivity).supportActionBar?.setDisplayHomeAsUpEnabled(true)
-        }
-        // 인스턴스 설정
-        mViewModel = ViewModelProvider(requireActivity())[MyViewModel::class.java]
-
-        val url = mViewModel.getUrl().value?:"https://www.nike.com/kr/launch/?type=feed"
-
-        // id설정
-        mainWebView = view.findViewById<WebView>(R.id.main_webView).apply {
-            loadUrl(url)
-
-            settings.javaScriptEnabled = true
-            webViewClient = WebViewClient()
-            webChromeClient = mWebChromeClient
-        }
-        mainProgress = view.findViewById(R.id.main_webProgress)
-        mainWebRefresh = view.findViewById<SwipeRefreshLayout>(R.id.main_webViewRefresh).apply {
-            setOnRefreshListener {
-                mainWebView.reload()
-            }
-        }
-    }
-
-    override fun onOptionsItemSelected(item: MenuItem): Boolean {
-        return when (item.itemId) {
-            android.R.id.home -> {
-                backPressedCallback.isEnabled = false
-                findNavController().navigateUp()
-                true
-            }
-            else -> false
-        }
-    }
-
-    private val mWebChromeClient = object : WebChromeClient() {
-        override fun onProgressChanged(view: WebView?, newProgress: Int) {
-            super.onProgressChanged(view, newProgress)
-
-            with(mainProgress) {
-                visibility = View.VISIBLE
-                progress = newProgress
-
-                if (progress == 100) {
-                    visibility = View.GONE
-                    mainWebRefresh.isRefreshing = false
-                }
-            }
-        }
-    }
-
-    private val backPressedCallback = object : OnBackPressedCallback(true) {
-        override fun handleOnBackPressed() {
-            if (mainWebView.canGoBack()) {
-                mainWebView.goBack()
-            } else {
-                super.setEnabled(false)
-                requireActivity().onBackPressed()
-            }
-        }
-    }
-}
\ No newline at end of file
Index: app/src/main/java/com/nikealarm/nikedrawalarm/ui/MainApplication.kt
===================================================================
--- app/src/main/java/com/nikealarm/nikedrawalarm/ui/MainApplication.kt	(revision b3f4dce6bbc1f64b2f120ac4dc054823810b53e9)
+++ app/src/main/java/com/nikealarm/nikedrawalarm/ui/MainApplication.kt	(revision b3f4dce6bbc1f64b2f120ac4dc054823810b53e9)
@@ -1,19 +0,0 @@
-package com.nikealarm.nikedrawalarm.ui
-
-import android.app.Application
-import androidx.hilt.work.HiltWorkerFactory
-import androidx.work.Configuration
-import dagger.hilt.android.HiltAndroidApp
-import javax.inject.Inject
-
-@HiltAndroidApp
-class MainApplication : Application(), Configuration.Provider {
-
-    @Inject
-    lateinit var workerFactory: HiltWorkerFactory
-
-    override fun getWorkManagerConfiguration(): Configuration =
-        Configuration.Builder()
-        .setWorkerFactory(workerFactory)
-        .build()
-}
\ No newline at end of file
Index: app/src/main/java/com/nikealarm/nikedrawalarm/ui/fragment/WebFragment.kt
===================================================================
--- app/src/main/java/com/nikealarm/nikedrawalarm/ui/fragment/WebFragment.kt	(revision b3f4dce6bbc1f64b2f120ac4dc054823810b53e9)
+++ app/src/main/java/com/nikealarm/nikedrawalarm/ui/fragment/WebFragment.kt	(revision b3f4dce6bbc1f64b2f120ac4dc054823810b53e9)
@@ -1,83 +0,0 @@
-package com.nikealarm.nikedrawalarm.ui.fragment
-
-import android.os.Bundle
-import android.view.*
-import androidx.fragment.app.Fragment
-import android.webkit.WebChromeClient
-import android.webkit.WebView
-import android.webkit.WebViewClient
-import android.widget.ProgressBar
-import androidx.activity.OnBackPressedCallback
-import androidx.swiperefreshlayout.widget.SwipeRefreshLayout
-import com.nikealarm.nikedrawalarm.R
-import com.nikealarm.nikedrawalarm.other.Contents
-
-class WebFragment : Fragment() {
-    private lateinit var mainWebView: WebView
-    private lateinit var mainProgress: ProgressBar
-    private lateinit var mainWebRefresh: SwipeRefreshLayout
-
-    override fun onCreateView(
-        inflater: LayoutInflater, container: ViewGroup?,
-        savedInstanceState: Bundle?
-    ): View? {
-        // Inflate the layout for this fragment
-
-        activity?.onBackPressedDispatcher?.addCallback(backPressedCallback)
-        return inflater.inflate(R.layout.fragment_web, container, false)
-    }
-
-    // 시작
-    override fun onViewCreated(view: View, savedInstanceState: Bundle?) {
-        super.onViewCreated(view, savedInstanceState)
-
-        val url = requireActivity().intent.getStringExtra(Contents.DRAW_URL)
-            ?: "https://www.nike.com/kr/launch/?type=feed"
-
-        // id설정
-        mainWebView = view.findViewById<WebView>(R.id.main_webView).apply {
-            loadUrl(url)
-
-            settings.javaScriptEnabled = true
-            webViewClient = WebViewClient()
-            webChromeClient = mWebChromeClient
-        }
-        mainProgress = view.findViewById(R.id.main_webProgress)
-        mainWebRefresh = view.findViewById<SwipeRefreshLayout>(R.id.main_webViewRefresh).apply {
-            setOnRefreshListener {
-                mainWebView.reload()
-            }
-        }
-    }
-
-    private val mWebChromeClient = object : WebChromeClient() {
-        override fun onProgressChanged(view: WebView?, newProgress: Int) {
-            super.onProgressChanged(view, newProgress)
-
-            with(mainProgress) {
-                visibility = View.VISIBLE
-                progress = newProgress
-
-                if (progress == 100) {
-                    visibility = View.GONE
-                    mainWebRefresh.isRefreshing = false
-                }
-            }
-        }
-    }
-
-    private val backPressedCallback = object : OnBackPressedCallback(true) {
-        override fun handleOnBackPressed() {
-            if (mainWebView.canGoBack()) {
-                mainWebView.goBack()
-            } else {
-                super.setEnabled(false)
-                try {
-                    requireActivity().onBackPressed()
-                } catch (e: IllegalStateException) {
-                    requireActivity().finish()
-                }
-            }
-        }
-    }
-}
\ No newline at end of file
Index: app/src/main/java/com/nikealarm/nikedrawalarm/adapter/SpecialShoesListAdapter.kt
===================================================================
--- app/src/main/java/com/nikealarm/nikedrawalarm/adapter/SpecialShoesListAdapter.kt	(revision b3f4dce6bbc1f64b2f120ac4dc054823810b53e9)
+++ app/src/main/java/com/nikealarm/nikedrawalarm/adapter/SpecialShoesListAdapter.kt	(revision b3f4dce6bbc1f64b2f120ac4dc054823810b53e9)
@@ -1,235 +0,0 @@
-package com.nikealarm.nikedrawalarm.adapter
-
-import android.content.Context
-import android.util.Log
-import android.view.LayoutInflater
-import android.view.View
-import android.view.ViewGroup
-import android.view.animation.Animation
-import android.view.animation.Transformation
-import android.widget.FrameLayout
-import android.widget.ImageButton
-import android.widget.ImageView
-import android.widget.TextView
-import androidx.constraintlayout.widget.ConstraintLayout
-import androidx.paging.PagedListAdapter
-import androidx.recyclerview.widget.DiffUtil
-import androidx.recyclerview.widget.RecyclerView
-import com.bumptech.glide.Glide
-import com.chauthai.swipereveallayout.SwipeRevealLayout
-import com.chauthai.swipereveallayout.ViewBinderHelper
-import com.nikealarm.nikedrawalarm.R
-import com.nikealarm.nikedrawalarm.database.ShoesDataModel
-import com.nikealarm.nikedrawalarm.database.SpecialShoesDataModel
-import com.nikealarm.nikedrawalarm.other.Contents
-
-class SpecialShoesListAdapter(private val context: Context) :
-    PagedListAdapter<SpecialShoesDataModel, SpecialShoesListAdapter.SpecialShoesListViewHolder>(
-        diffCallback
-    ) {
-
-    interface AlarmListener {
-        fun onAlarmListener(specialShoesData: SpecialShoesDataModel?, pos: Int, isChecked: Boolean)
-    }
-
-    private var previousPosition = -1 // 이전에 선택한 리스트뷰에 위치
-    private val viewBinderHelper = ViewBinderHelper()
-    private lateinit var alarmListener: AlarmListener
-
-    inner class SpecialShoesListViewHolder(itemView: View) : RecyclerView.ViewHolder(itemView) {
-        val monthText = itemView.findViewById<TextView>(R.id.upcomingList_monthText)
-        val dayText = itemView.findViewById<TextView>(R.id.upcomingList_dayText)
-        val categoryText = itemView.findViewById<TextView>(R.id.upcomingList_categoryText)
-        val shoesTitleText = itemView.findViewById<TextView>(R.id.upcomingList_shoesTitle_text)
-        val shoesSubTitleText =
-            itemView.findViewById<TextView>(R.id.upcomingList_shoesSubTitle_text)
-        val whenStartEventText =
-            itemView.findViewById<TextView>(R.id.upcomingList_whenStartEvent_text)
-        val shoesImageView = itemView.findViewById<ImageView>(R.id.upcomingList_shoesImage_imageView)
-        val alarmImageButton = itemView.findViewById<ImageButton>(R.id.upcomingList_alarm_imageButton)
-        val moreInfoButton = itemView.findViewById<ImageButton>(R.id.upcomingList_moreInfo_imageButton)
-
-        val mainLayout = itemView.findViewById<ConstraintLayout>(R.id.upcomingList_mainLayout)
-        val subLayout = itemView.findViewById<FrameLayout>(R.id.upcomingList_subLayout)
-        val swipeLayout = itemView.findViewById<SwipeRevealLayout>(R.id.upcomingList_swipeLayout)
-
-        fun bindView(data: SpecialShoesDataModel?) {
-            monthText.text = data?.SpecialMonth
-            dayText.text = data?.SpecialDay
-            categoryText.text = when(data?.ShoesCategory) {
-                ShoesDataModel.CATEGORY_DRAW -> "DRAW"
-                ShoesDataModel.CATEGORY_COMING_SOON -> "COMING"
-                else -> "DRAW"
-            }
-            shoesTitleText.text = data?.ShoesTitle
-            shoesSubTitleText.text = data?.ShoesSubTitle
-            whenStartEventText.text = data?.SpecialWhenEvent
-            Glide.with(itemView.context).load(data?.ShoesImageUrl).into(shoesImageView)
-
-            if(data?.isOpened!!) { // 레이아웃 확장
-                if(subLayout.visibility == View.GONE) {
-                    expand()
-                }
-            } else {
-                collapse()
-            }
-
-            mainLayout.setOnClickListener {
-                currentList?.get(adapterPosition)?.isOpened = !currentList?.get(adapterPosition)!!.isOpened
-                Log.i("CheckList", "${data.isOpened}")
-
-                if(previousPosition != -1 && previousPosition != adapterPosition) { // 다른 리스트를 눌렀을 때
-                    currentList?.get(previousPosition)?.isOpened = !currentList?.get(previousPosition)!!.isOpened
-                    notifyItemChanged(previousPosition)
-                }
-
-                notifyItemChanged(adapterPosition)
-                previousPosition = if(previousPosition == adapterPosition) { // 같은 리스트를 눌렀을 때
-                    -1
-                } else { // 다른 리스트를 눌렀을 때
-                    adapterPosition
-                }
-            }
-
-            if (isChecked("${data.ShoesTitle}-${data.ShoesSubTitle}")) {
-                alarmImageButton.setImageResource(R.drawable.ic_baseline_notifications_active)
-
-                alarmImageButton.setOnClickListener {
-                    alarmListener.onAlarmListener(data, adapterPosition, true)
-                }
-            } else {
-                alarmImageButton.setImageResource(R.drawable.ic_baseline_notifications_none)
-
-                alarmImageButton.setOnClickListener {
-                    alarmListener.onAlarmListener(data, adapterPosition, false)
-                }
-            }
-        }
-
-        // 레이아웃 확장
-        private fun expand() {
-            expandAnimation()
-        }
-
-        // 레이아웃 축소
-        private fun collapse() {
-            collapseAnimation()
-        }
-
-        // 애니메이션 설정 시작
-        private fun expandAnimation() {
-            with(moreInfoButton) {
-                animate().setDuration(200)
-                    .rotation(-180f)
-                    .withLayer()
-            }
-
-            with(subLayout) {
-                measure(View.MeasureSpec.UNSPECIFIED, View.MeasureSpec.UNSPECIFIED)
-                val actualHeight = measuredHeight
-
-                layoutParams.height = 0
-                visibility = View.VISIBLE
-
-                val animation = object : Animation() {
-                    override fun applyTransformation(interpolatedTime: Float, t: Transformation?) {
-                        super.applyTransformation(interpolatedTime, t)
-
-                        layoutParams.height = if(interpolatedTime.toInt() == 1) {
-                            ViewGroup.LayoutParams.WRAP_CONTENT
-                        } else {
-                            (actualHeight * interpolatedTime).toInt()
-                        }
-                        requestLayout()
-                    }
-                }
-
-                animation.duration = (actualHeight / context.resources.displayMetrics.density).toLong()
-                startAnimation(animation)
-            }
-        }
-
-        private fun collapseAnimation() {
-            with(moreInfoButton) {
-                animate().setDuration(200)
-                    .rotation(0f)
-                    .withLayer()
-            }
-
-            with(subLayout) {
-                val actualHeight = measuredHeight
-
-                val animation = object : Animation() {
-                    override fun applyTransformation(interpolatedTime: Float, t: Transformation?) {
-                        super.applyTransformation(interpolatedTime, t)
-
-                        if(interpolatedTime.toInt() == 1) {
-                            visibility = View.GONE
-                        } else {
-                            layoutParams.height = actualHeight - (actualHeight * interpolatedTime).toInt()
-                            requestLayout()
-                        }
-                    }
-                }
-
-                animation.duration = (actualHeight / context.resources.displayMetrics.density).toLong()
-                startAnimation(animation)
-            }
-        }
-        // 애니메이션 설정 끝
-
-        private fun isChecked(preferenceKey: String?): Boolean {
-            val allowAlarmPreference = context.getSharedPreferences(
-                Contents.PREFERENCE_NAME_ALLOW_ALARM,
-                Context.MODE_PRIVATE
-            )
-            return allowAlarmPreference.getBoolean(preferenceKey, false)
-        }
-    }
-
-    override fun onCreateViewHolder(parent: ViewGroup, viewType: Int): SpecialShoesListViewHolder {
-        val view = LayoutInflater.from(parent.context).inflate(R.layout.upcoming_listitem, parent, false)
-        return SpecialShoesListViewHolder(view)
-    }
-
-    override fun onBindViewHolder(holder: SpecialShoesListViewHolder, position: Int) {
-        with(viewBinderHelper) {
-            setOpenOnlyOne(true)
-            bind(holder.swipeLayout, getItemId(position).toString())
-        }
-        holder.bindView(getItem(position))
-    }
-
-    override fun getItemId(position: Int): Long {
-        return currentList?.get(position)?.ShoesId?.toLong()!!
-    }
-
-    fun setOnAlarmListener(_alarmListener: AlarmListener) {
-        alarmListener = _alarmListener
-    }
-
-    fun changeCategory() {
-        if(previousPosition != -1) {
-            currentList?.get(previousPosition)?.isOpened = false
-            previousPosition = -1
-        }
-
-        notifyDataSetChanged()
-    }
-
-    companion object {
-        private val diffCallback = object : DiffUtil.ItemCallback<SpecialShoesDataModel>() {
-            override fun areItemsTheSame(
-                oldItem: SpecialShoesDataModel,
-                newItem: SpecialShoesDataModel
-            ): Boolean =
-                oldItem.ShoesId == newItem.ShoesId
-
-            override fun areContentsTheSame(
-                oldItem: SpecialShoesDataModel,
-                newItem: SpecialShoesDataModel
-            ): Boolean =
-                oldItem.ShoesTitle == newItem.ShoesTitle
-        }
-    }
-}
\ No newline at end of file
Index: app/src/main/java/com/nikealarm/nikedrawalarm/database/Dao.kt
===================================================================
--- app/src/main/java/com/nikealarm/nikedrawalarm/database/Dao.kt	(revision b3f4dce6bbc1f64b2f120ac4dc054823810b53e9)
+++ app/src/main/java/com/nikealarm/nikedrawalarm/database/Dao.kt	(revision b3f4dce6bbc1f64b2f120ac4dc054823810b53e9)
@@ -1,59 +0,0 @@
-package com.nikealarm.nikedrawalarm.database
-
-import androidx.paging.DataSource
-import androidx.room.*
-import androidx.room.Dao
-
-@Dao
-interface Dao {
-    // SpecialShoesData
-    @Query("SELECT ShoesId, ShoesSubTitle, ShoesTitle, ShoesPrice, ShoesImageUrl, ShoesUrl, ShoesCategory, SpecialMonth, SpecialDay, SpecialWhenEvent, SpecialOrder FROM ShoesDataModel INNER JOIN SpecialDataModel ON ShoesUrl = SpecialUrl ORDER BY SpecialOrder ASC")
-    fun getAllSpecialShoesData(): List<SpecialShoesDataModel>
-
-    @Query("SELECT ShoesId, ShoesSubTitle, ShoesTitle, ShoesPrice, ShoesImageUrl, ShoesUrl, ShoesCategory, SpecialMonth, SpecialDay, SpecialWhenEvent, SpecialOrder FROM ShoesDataModel INNER JOIN SpecialDataModel ON ShoesUrl = SpecialUrl ORDER BY SpecialOrder ASC")
-    fun getAllSpecialShoesPagingData(): DataSource.Factory<Int, SpecialShoesDataModel>
-
-    @Query("SELECT ShoesId, ShoesSubTitle, ShoesTitle, ShoesPrice, ShoesImageUrl, ShoesUrl, ShoesCategory, SpecialMonth, SpecialDay, SpecialWhenEvent, SpecialOrder FROM ShoesDataModel INNER JOIN SpecialDataModel ON ShoesUrl = SpecialUrl WHERE ShoesCategory = :upcomingCategory ORDER BY SpecialOrder ASC")
-    fun getSpecialShoesPagingData(upcomingCategory: String): DataSource.Factory<Int, SpecialShoesDataModel>
-
-    // SpecialData
-    @Query("SELECT * FROM SpecialDataModel")
-    fun getAllSpecialData(): List<SpecialDataModel>
-
-    @Insert(entity = SpecialDataModel::class)
-    fun insertSpecialData(insertData: SpecialDataModel)
-
-    @Query("UPDATE SpecialDataModel SET SpecialUrl = :specialNewUrl WHERE SpecialUrl = :specialOldUrl")
-    fun updateSpecialDataUrl(specialNewUrl: String, specialOldUrl: String)
-
-    @Query("DELETE FROM SpecialDataModel")
-    fun clearSpecialData()
-
-    @Query("DELETE FROM SpecialDataModel WHERE SpecialUrl = :specialUrl")
-    fun deleteSpecialData(specialUrl: String)
-
-    // ShoesData
-    @Query("SELECT * FROM ShoesDataModel WHERE ShoesCategory = :shoesCategory")
-    fun getShoesData(shoesCategory: String): DataSource.Factory<Int, ShoesDataModel>
-
-    @Query("SELECT * FROM ShoesDataModel")
-    fun getAllShoesData(): List<ShoesDataModel>
-
-    @Query("UPDATE ShoesDataModel SET ShoesPrice = :updatePrice, ShoesCategory = :updateCategory WHERE ShoesTitle = :shoesTitle AND ShoesSubTitle = :shoesSubTitle")
-    fun updateShoesCategory(updatePrice: String?, updateCategory: String?, shoesTitle: String, shoesSubTitle: String)
-
-    @Query("UPDATE ShoesDataModel SET ShoesUrl = :updateUrl WHERE ShoesTitle = :shoesTitle AND ShoesSubTitle = :shoesSubTitle")
-    fun updateShoesUrl(updateUrl: String?, shoesTitle: String, shoesSubTitle: String)
-
-    @Insert(entity = ShoesDataModel::class)
-    fun insertShoesData(insertData: ShoesDataModel)
-
-    @Query("DELETE FROM ShoesDataModel WHERE ShoesTitle = :shoesTitle AND ShoesSubTitle = :shoesSubTitle")
-    fun deleteShoesData(shoesTitle: String, shoesSubTitle: String)
-
-    @Query("DELETE FROM ShoesDataModel")
-    fun clearShoesData()
-
-    @Query("SELECT * FROM ShoesDataModel WHERE ShoesId = :id")
-    fun getShoesDataById(id: Int?): ShoesDataModel
-}
\ No newline at end of file
Index: app/src/main/java/com/nikealarm/nikedrawalarm/ui/fragment/LoadingFragment.kt
===================================================================
--- app/src/main/java/com/nikealarm/nikedrawalarm/ui/fragment/LoadingFragment.kt	(revision b3f4dce6bbc1f64b2f120ac4dc054823810b53e9)
+++ app/src/main/java/com/nikealarm/nikedrawalarm/ui/fragment/LoadingFragment.kt	(revision b3f4dce6bbc1f64b2f120ac4dc054823810b53e9)
@@ -1,139 +0,0 @@
-package com.nikealarm.nikedrawalarm.ui.fragment
-
-import android.os.Bundle
-import android.view.LayoutInflater
-import android.view.View
-import android.view.ViewGroup
-import android.widget.Button
-import android.widget.ProgressBar
-import android.widget.TextView
-import androidx.fragment.app.Fragment
-import androidx.lifecycle.Observer
-import androidx.navigation.fragment.findNavController
-import androidx.work.*
-import com.nikealarm.nikedrawalarm.R
-import com.nikealarm.nikedrawalarm.component.ParsingWorker
-import com.nikealarm.nikedrawalarm.other.Contents
-import kotlinx.android.synthetic.main.fragment_loading.*
-
-class LoadingFragment : Fragment() {
-    private lateinit var explainText: TextView
-    private lateinit var restartBtn: Button
-    private lateinit var progressBar: ProgressBar
-
-    companion object {
-        private var isStarted = false
-    }
-
-    override fun onCreateView(
-        inflater: LayoutInflater,
-        container: ViewGroup?,
-        savedInstanceState: Bundle?
-    ): View? {
-
-        startWork()
-        return inflater.inflate(R.layout.fragment_loading, container, false)
-    }
-
-    // 시작
-    override fun onViewCreated(view: View, savedInstanceState: Bundle?) {
-        super.onViewCreated(view, savedInstanceState)
-
-        // id 설정
-        explainText = view.findViewById(R.id.loadingFrag_errorText)
-        restartBtn = view.findViewById<Button>(R.id.loadingFrag_restart_btn).apply {
-            setOnClickListener {
-                startWorkAnimation()
-                startWork()
-            }
-        }
-        progressBar = view.findViewById(R.id.loadingFrag_progressBar)
-
-        // 옵저버 설정
-        WorkManager.getInstance(requireContext())
-            .getWorkInfosByTagLiveData(Contents.WORKER_PARSING_DATA)
-            .observe(viewLifecycleOwner, Observer {
-                when (it[0].state) {
-                    WorkInfo.State.SUCCEEDED -> { // 로딩 성공 시
-                        isStarted = true
-                        findNavController().navigate(R.id.action_loadingFragment_to_drawListFragment)
-                    }
-                    WorkInfo.State.FAILED -> { // 로딩 실패 시
-                        failedWorkAnimation()
-                    }
-                    WorkInfo.State.RUNNING -> { // 로딩 중
-                        val progress = it[0].progress
-                        val value = progress.getInt(Contents.WORKER_PARSING_DATA_OUTPUT_KEY, 0)
-
-                        loadingFrag_percent_textView.text = "$value%"
-                    }
-                    else -> {}
-                }
-            })
-    }
-
-    override fun onDestroy() {
-        super.onDestroy()
-
-        if(!isStarted) { // 로딩중에 앱을 나갔을 경우
-            WorkManager.getInstance(requireContext())
-                .cancelUniqueWork(Contents.WORKER_PARSING_DATA)
-        }
-    }
-
-    private fun startWork() {
-        if (!isStarted) {
-            val parsingWork: OneTimeWorkRequest = OneTimeWorkRequestBuilder<ParsingWorker>()
-                .addTag(Contents.WORKER_PARSING_DATA)
-                .build()
-
-            WorkManager.getInstance(requireContext()).enqueueUniqueWork(
-                Contents.WORKER_PARSING_DATA,
-                ExistingWorkPolicy.KEEP,
-                parsingWork
-            )
-        }
-    }
-
-    // 애니메이션 설정
-    private fun failedWorkAnimation() {
-        with(loadingFrag_errorLayout) {
-            animate().setDuration(200)
-                .alpha(1f)
-                .withLayer()
-
-            restartBtn.isEnabled = true
-        }
-        with(loadingFrag_mainLayout) {
-            animate().setDuration(200)
-                .alpha(0f)
-                .withLayer()
-        }
-        with(loadingFrag_explainText) {
-            animate().setDuration(200)
-                .alpha(0f)
-                .withLayer()
-        }
-    }
-
-    private fun startWorkAnimation() {
-        with(loadingFrag_errorLayout) {
-            animate().setDuration(200)
-                .alpha(0f)
-                .withLayer()
-
-            restartBtn.isEnabled = false
-        }
-        with(loadingFrag_mainLayout) {
-            animate().setDuration(200)
-                .alpha(1f)
-                .withLayer()
-        }
-        with(loadingFrag_explainText) {
-            animate().setDuration(200)
-                .alpha(1f)
-                .withLayer()
-        }
-    }
-    // 애니메이션 설정 끝
-}
\ No newline at end of file
Index: app/src/main/java/com/nikealarm/nikedrawalarm/other/di/AppModule.kt
===================================================================
--- app/src/main/java/com/nikealarm/nikedrawalarm/other/di/AppModule.kt	(revision b3f4dce6bbc1f64b2f120ac4dc054823810b53e9)
+++ app/src/main/java/com/nikealarm/nikedrawalarm/other/di/AppModule.kt	(revision b3f4dce6bbc1f64b2f120ac4dc054823810b53e9)
@@ -1,58 +0,0 @@
-package com.nikealarm.nikedrawalarm.other.di
-
-import android.content.Context
-import androidx.room.Room
-import com.nikealarm.nikedrawalarm.database.Dao
-import com.nikealarm.nikedrawalarm.database.MyDataBase
-import com.nikealarm.nikedrawalarm.other.Contents
-import com.nikealarm.nikedrawalarm.viewmodel.MyRepository
-import dagger.Module
-import dagger.Provides
-import dagger.hilt.InstallIn
-import dagger.hilt.android.components.ApplicationComponent
-import dagger.hilt.android.qualifiers.ApplicationContext
-import javax.inject.Named
-import javax.inject.Singleton
-
-@InstallIn(ApplicationComponent::class)
-@Module
-object AppModule {
-
-    @Singleton
-    @Provides
-    @Named(Contents.PREFERENCE_NAME_TIME)
-    fun provideTimePreferences(@ApplicationContext context: Context) =
-        context.getSharedPreferences(
-            Contents.PREFERENCE_NAME_TIME,
-            Context.MODE_PRIVATE
-        )
-
-    @Singleton
-    @Provides
-    @Named(Contents.PREFERENCE_NAME_ALLOW_ALARM)
-    fun provideAllowAlarmPreferences(@ApplicationContext context: Context) =
-        context.getSharedPreferences(
-            Contents.PREFERENCE_NAME_ALLOW_ALARM,
-            Context.MODE_PRIVATE
-        )
-
-    @Singleton
-    @Provides
-    fun provideDatabase(@ApplicationContext context: Context) =
-        Room.databaseBuilder(
-            context,
-            MyDataBase::class.java,
-            "database"
-            )
-            .fallbackToDestructiveMigration()
-            .build()
-
-    @Singleton
-    @Provides
-    fun provideDao(database: MyDataBase) =
-        database.getDao()
-
-    @Provides
-    fun provideRepository(dao: Dao) =
-        MyRepository(dao)
-}
\ No newline at end of file
Index: app/src/main/java/com/nikealarm/nikedrawalarm/database/EventDay.kt
===================================================================
--- app/src/main/java/com/nikealarm/nikedrawalarm/database/EventDay.kt	(revision b3f4dce6bbc1f64b2f120ac4dc054823810b53e9)
+++ app/src/main/java/com/nikealarm/nikedrawalarm/database/EventDay.kt	(revision b3f4dce6bbc1f64b2f120ac4dc054823810b53e9)
@@ -1,7 +0,0 @@
-package com.nikealarm.nikedrawalarm.database
-
-data class EventDay(
-    val eventMonth: String,
-    val eventDay: String,
-    val eventTime: String
-)
\ No newline at end of file
Index: app/src/main/java/com/nikealarm/nikedrawalarm/database/Converter.kt
===================================================================
--- app/src/main/java/com/nikealarm/nikedrawalarm/database/Converter.kt	(revision b3f4dce6bbc1f64b2f120ac4dc054823810b53e9)
+++ app/src/main/java/com/nikealarm/nikedrawalarm/database/Converter.kt	(revision b3f4dce6bbc1f64b2f120ac4dc054823810b53e9)
@@ -1,22 +0,0 @@
-package com.nikealarm.nikedrawalarm.database
-
-import android.graphics.Bitmap
-import android.graphics.BitmapFactory
-import androidx.room.TypeConverter
-import java.io.ByteArrayOutputStream
-
-class Converter {
-
-    @TypeConverter
-    fun toBitmap(bytes: ByteArray): Bitmap {
-        return BitmapFactory.decodeByteArray(bytes, 0, bytes.size)
-    }
-
-    @TypeConverter
-    fun fromBitmap(bmp: Bitmap): ByteArray {
-        val outputStream = ByteArrayOutputStream()
-        bmp.compress(Bitmap.CompressFormat.JPEG, 100, outputStream)
-
-        return outputStream.toByteArray()
-    }
-}
\ No newline at end of file
Index: app/src/main/java/com/nikealarm/nikedrawalarm/database/SpecialDataModel.kt
===================================================================
--- app/src/main/java/com/nikealarm/nikedrawalarm/database/SpecialDataModel.kt	(revision b3f4dce6bbc1f64b2f120ac4dc054823810b53e9)
+++ app/src/main/java/com/nikealarm/nikedrawalarm/database/SpecialDataModel.kt	(revision b3f4dce6bbc1f64b2f120ac4dc054823810b53e9)
@@ -1,29 +0,0 @@
-package com.nikealarm.nikedrawalarm.database
-
-import androidx.room.ColumnInfo
-import androidx.room.Entity
-import androidx.room.Ignore
-import androidx.room.PrimaryKey
-
-@Entity
-data class SpecialDataModel(
-    @PrimaryKey(autoGenerate = true)
-    @ColumnInfo(name = "SpecialId")
-    val id: Int?,
-    @ColumnInfo(name = "SpecialUrl")
-    val specialUrl: String,
-    @ColumnInfo(name = "SpecialMonth")
-    val specialMonth: String? = null,
-    @ColumnInfo(name = "SpecialDay")
-    val specialDay: String? = null,
-    @ColumnInfo(name = "SpecialWhenEvent")
-    val specialWhenEvent: String? = null,
-    @ColumnInfo(name = "SpecialOrder")
-    val specialOrder: Int? = null
-    ) {
-
-    override fun equals(other: Any?): Boolean {
-        other as SpecialDataModel
-        return specialUrl == other.specialUrl
-    }
-}
\ No newline at end of file
Index: app/src/main/java/com/nikealarm/nikedrawalarm/component/worker/ResetProductAlarmWorker.kt
===================================================================
--- app/src/main/java/com/nikealarm/nikedrawalarm/component/worker/ResetProductAlarmWorker.kt	(revision b3f4dce6bbc1f64b2f120ac4dc054823810b53e9)
+++ app/src/main/java/com/nikealarm/nikedrawalarm/component/worker/ResetProductAlarmWorker.kt	(revision b3f4dce6bbc1f64b2f120ac4dc054823810b53e9)
@@ -1,92 +0,0 @@
-package com.nikealarm.nikedrawalarm.component.worker
-
-import android.app.AlarmManager
-import android.app.PendingIntent
-import android.content.Context
-import android.content.Intent
-import android.content.SharedPreferences
-import android.os.Build
-import android.util.Log
-import androidx.hilt.Assisted
-import androidx.hilt.work.WorkerInject
-import androidx.work.Worker
-import androidx.work.WorkerParameters
-import com.nikealarm.nikedrawalarm.component.MyAlarmReceiver
-import com.nikealarm.nikedrawalarm.database.Dao
-import com.nikealarm.nikedrawalarm.database.MyDataBase
-import com.nikealarm.nikedrawalarm.database.SpecialShoesDataModel
-import com.nikealarm.nikedrawalarm.other.Contents
-import javax.inject.Named
-
-class ResetProductAlarmWorker @WorkerInject constructor(
-    @Assisted appContext: Context,
-    @Assisted workerParams: WorkerParameters,
-    @Named(Contents.PREFERENCE_NAME_TIME) val timePreferences: SharedPreferences,
-    @Named(Contents.PREFERENCE_NAME_ALLOW_ALARM) val allowAlarmPreferences: SharedPreferences,
-    val mDao: Dao
-) : Worker(appContext, workerParams) {
-
-    override fun doWork(): Result {
-        resetProductAlarm()
-        return Result.success()
-    }
-
-    private fun resetProductAlarm() {
-        for (position in mDao.getAllSpecialShoesData().indices) {
-            val shoesData = mDao.getAllSpecialShoesData()[position]
-            val preferenceKey = "${shoesData.ShoesTitle}-${shoesData.ShoesSubTitle}"
-            val timeTrigger = timePreferences.getLong(preferenceKey, 0)
-
-            if (timeTrigger != 0L) {
-                Log.i("CheckTime", "$timeTrigger")
-                if (timeTrigger < System.currentTimeMillis()) {
-                    deleteDrawShoesData(shoesData)
-                    continue
-                }
-
-                val mAlarmManager =
-                    applicationContext.getSystemService(Context.ALARM_SERVICE) as AlarmManager
-
-                val reIntent = Intent(applicationContext, MyAlarmReceiver::class.java).apply {
-                    action = Contents.INTENT_ACTION_PRODUCT_ALARM
-                    putExtra(Contents.INTENT_KEY_POSITION, position)
-                }
-
-                val alarmPendingIntent = PendingIntent.getBroadcast(
-                    applicationContext,
-                    position,
-                    reIntent,
-                    PendingIntent.FLAG_UPDATE_CURRENT
-                )
-
-                if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.M) {
-                    mAlarmManager.setExactAndAllowWhileIdle(
-                        AlarmManager.RTC_WAKEUP,
-                        timeTrigger,
-                        alarmPendingIntent
-                    )
-                } else {
-                    mAlarmManager.setExact(
-                        AlarmManager.RTC_WAKEUP,
-                        timeTrigger,
-                        alarmPendingIntent
-                    )
-                }
-            }
-        }
-    }
-
-    private fun deleteDrawShoesData(data: SpecialShoesDataModel) {
-        with(timePreferences.edit()) {
-            remove("${data.ShoesTitle}-${data.ShoesSubTitle}")
-            commit()
-        }
-
-        with(allowAlarmPreferences.edit()) {
-            remove("${data.ShoesTitle}-${data.ShoesSubTitle}")
-            commit()
-        }
-
-        mDao.deleteSpecialData(data.ShoesUrl!!)
-    }
-}
\ No newline at end of file
Index: app/src/main/java/com/nikealarm/nikedrawalarm/adapter/ImageListPagerAdapter.kt
===================================================================
--- app/src/main/java/com/nikealarm/nikedrawalarm/adapter/ImageListPagerAdapter.kt	(revision b3f4dce6bbc1f64b2f120ac4dc054823810b53e9)
+++ app/src/main/java/com/nikealarm/nikedrawalarm/adapter/ImageListPagerAdapter.kt	(revision b3f4dce6bbc1f64b2f120ac4dc054823810b53e9)
@@ -1,29 +0,0 @@
-package com.nikealarm.nikedrawalarm.adapter
-
-import android.view.LayoutInflater
-import android.view.View
-import android.view.ViewGroup
-import android.widget.ImageView
-import androidx.recyclerview.widget.RecyclerView
-import com.bumptech.glide.Glide
-import com.nikealarm.nikedrawalarm.R
-
-class ImageListPagerAdapter(private val imageList: Array<String>) : RecyclerView.Adapter<ImageListPagerAdapter.ImageListViewHolder>() {
-
-    inner class ImageListViewHolder(itemView: View) : RecyclerView.ViewHolder(itemView) {
-        val shoesImageView = itemView.findViewById<ImageView>(R.id.showImageFrag_imageView)
-    }
-
-    override fun onCreateViewHolder(parent: ViewGroup, viewType: Int): ImageListViewHolder {
-        val view = LayoutInflater.from(parent.context).inflate(R.layout.fragment_show_image, parent, false)
-        return ImageListViewHolder(view)
-    }
-
-    override fun getItemCount(): Int {
-        return imageList.size
-    }
-
-    override fun onBindViewHolder(holder: ImageListViewHolder, position: Int) {
-        Glide.with(holder.itemView).load(imageList[position]).into(holder.shoesImageView)
-    }
-}
\ No newline at end of file
Index: app/src/main/java/com/nikealarm/nikedrawalarm/viewmodel/MyViewModel.kt
===================================================================
--- app/src/main/java/com/nikealarm/nikedrawalarm/viewmodel/MyViewModel.kt	(revision b3f4dce6bbc1f64b2f120ac4dc054823810b53e9)
+++ app/src/main/java/com/nikealarm/nikedrawalarm/viewmodel/MyViewModel.kt	(revision b3f4dce6bbc1f64b2f120ac4dc054823810b53e9)
@@ -1,60 +0,0 @@
-package com.nikealarm.nikedrawalarm.viewmodel
-
-import android.app.Application
-import androidx.arch.core.util.Function
-import androidx.lifecycle.*
-import androidx.paging.PagedList
-import com.nikealarm.nikedrawalarm.database.ShoesDataModel
-import com.nikealarm.nikedrawalarm.database.SpecialShoesDataModel
-
-class MyViewModel(application: Application) : AndroidViewModel(application) {
-    private val repository =
-        MyRepository(application)
-
-    // 전체 목록
-    private val shoesCategory = MutableLiveData<String>(ShoesDataModel.CATEGORY_RELEASED)
-
-    fun setShoesCategory(category: String) {
-        shoesCategory.value = category
-    }
-
-    fun getShoesCategory(): MutableLiveData<String> {
-        return shoesCategory
-    }
-
-    private val shoesList: LiveData<PagedList<ShoesDataModel>> = Transformations.switchMap(
-        shoesCategory, Function {
-            repository.getShoesData(it)
-        }
-    )
-
-    fun getShoesData(): LiveData<PagedList<ShoesDataModel>> {
-        return shoesList
-    }
-
-    // 특정 신발의 웹 주소
-    private val url = MutableLiveData<String>()
-
-    fun setUrl(url: String) {
-        this.url.value = url
-    }
-
-    fun getUrl(): MutableLiveData<String> {
-        return url
-    }
-
-    val shoesImageUrl = MutableLiveData<String>()
-
-    // Special 목록
-    val upcomingCategory = MutableLiveData<String>()
-
-    val specialShoesList: LiveData<PagedList<SpecialShoesDataModel>> = Transformations.switchMap(
-        upcomingCategory, Function {
-            if(it == "DEFAULT") {
-                repository.getAllSpecialShoesData()
-            } else {
-                repository.getSpecialShoesData(it)
-            }
-        }
-    )
-}
\ No newline at end of file
Index: app/src/main/java/com/nikealarm/nikedrawalarm/TestFragment.kt
===================================================================
--- app/src/main/java/com/nikealarm/nikedrawalarm/TestFragment.kt	(revision b3f4dce6bbc1f64b2f120ac4dc054823810b53e9)
+++ app/src/main/java/com/nikealarm/nikedrawalarm/TestFragment.kt	(revision b3f4dce6bbc1f64b2f120ac4dc054823810b53e9)
@@ -1,88 +0,0 @@
-//package com.nikealarm.nikedrawalarm
-//
-//import android.app.AlarmManager
-//import android.app.PendingIntent
-//import android.content.Context
-//import android.content.Intent
-//import android.os.Build
-//import android.os.Bundle
-//import android.util.Log
-//import androidx.fragment.app.Fragment
-//import android.view.LayoutInflater
-//import android.view.View
-//import android.view.ViewGroup
-//import android.widget.Button
-//import android.widget.TextView
-//import android.widget.Toast
-//import androidx.fragment.app.viewModels
-//import androidx.lifecycle.Observer
-//import androidx.lifecycle.ViewModelStoreOwner
-//import androidx.work.OneTimeWorkRequestBuilder
-//import androidx.work.WorkInfo
-//import androidx.work.WorkManager
-//import androidx.work.WorkRequest
-//import java.util.*
-//
-//class TestFragment : Fragment() {
-//    private lateinit var mAlarmManager: AlarmManager
-//
-//    override fun onCreateView(
-//        inflater: LayoutInflater, container: ViewGroup?,
-//        savedInstanceState: Bundle?
-//    ): View? {
-//        // Inflate the layout for this fragment
-//        return inflater.inflate(R.layout.fragment_test, container, false)
-//    }
-//
-//    // 시작
-//    override fun onViewCreated(view: View, savedInstanceState: Bundle?) {
-//        super.onViewCreated(view, savedInstanceState)
-//
-//        mAlarmManager = context?.getSystemService(Context.ALARM_SERVICE) as AlarmManager
-//
-//        val testText = view.findViewById<TextView>(R.id.test_text)
-//        val testButton = view.findViewById<Button>(R.id.test_button).apply {
-//            setOnClickListener {
-//                // 버튼 클릭 시
-//                val parsingWorkRequest = OneTimeWorkRequestBuilder<ParsingWorker>()
-//                    .build()
-//                WorkManager.getInstance(requireContext()).enqueue(parsingWorkRequest)
-//            }
-//        }
-//    }
-//
-//    // 알람 설정
-//    private fun setAlarm() {
-//        val mIntent = Intent(context, MyAlarmReceiver::class.java)
-//
-//        val mCalendar = Calendar.getInstance().apply {
-//            set(Calendar.HOUR_OF_DAY, 9)
-//            set(Calendar.MINUTE, 0)
-//            set(Calendar.SECOND, 0)
-//            set(Calendar.MILLISECOND, 0)
-//        }
-//
-//        val timeTrigger: Long
-//        if (System.currentTimeMillis() > mCalendar.timeInMillis) {
-//            timeTrigger = mCalendar.timeInMillis + 86400000
-//            mIntent.putExtra(MainActivity.SET_ALARM, timeTrigger)
-//        } else {
-//            timeTrigger = mCalendar.timeInMillis
-//            mIntent.putExtra(MainActivity.SET_ALARM, timeTrigger + 86400000)
-//        }
-//
-//        val mPendingIntent = PendingIntent.getBroadcast(
-//            requireContext(),
-//            MainActivity.REQUEST_ALARM_CODE,
-//            mIntent,
-//            PendingIntent.FLAG_UPDATE_CURRENT
-//        )
-//
-//        // 오전 9시 알람 설정
-//        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.M) {
-//            mAlarmManager.setExactAndAllowWhileIdle(AlarmManager.RTC_WAKEUP, timeTrigger, mPendingIntent)
-//        }
-//
-//        Toast.makeText(context, "눌림", Toast.LENGTH_SHORT).show()
-//    }
-//}
\ No newline at end of file
Index: app/src/main/java/com/nikealarm/nikedrawalarm/component/MyAlarmReceiver.kt
===================================================================
--- app/src/main/java/com/nikealarm/nikedrawalarm/component/MyAlarmReceiver.kt	(revision b3f4dce6bbc1f64b2f120ac4dc054823810b53e9)
+++ app/src/main/java/com/nikealarm/nikedrawalarm/component/MyAlarmReceiver.kt	(revision b3f4dce6bbc1f64b2f120ac4dc054823810b53e9)
@@ -1,180 +0,0 @@
-package com.nikealarm.nikedrawalarm.component
-
-import android.app.AlarmManager
-import android.app.PendingIntent
-import android.content.BroadcastReceiver
-import android.content.Context
-import android.content.Intent
-import android.content.SharedPreferences
-import android.os.Build
-import android.util.Log
-import androidx.work.ExistingWorkPolicy
-import androidx.work.OneTimeWorkRequestBuilder
-import androidx.work.WorkManager
-import androidx.work.workDataOf
-import com.nikealarm.nikedrawalarm.database.Dao
-import com.nikealarm.nikedrawalarm.database.MyDataBase
-import com.nikealarm.nikedrawalarm.database.SpecialShoesDataModel
-import com.nikealarm.nikedrawalarm.other.Contents
-import kotlinx.coroutines.CoroutineScope
-import kotlinx.coroutines.Dispatchers
-import kotlinx.coroutines.launch
-
-class MyAlarmReceiver : BroadcastReceiver() {
-    private lateinit var mDao: Dao
-
-    override fun onReceive(context: Context, intent: Intent) {
-        // This method is called when the BroadcastReceiver is receiving an Intent broadcast.
-        // 재부팅 시 알람 재설정
-        if (intent.action == "android.intent.action.BOOT_COMPLETED") {
-            reSetAlarm(context)
-            reSetProductAlarm(context)
-        } else {
-            // 매일 데이터를 갱신 함
-            if (intent.action == Contents.INTENT_ACTION_SYNC_ALARM) {
-                reSetAlarm(context)
-
-                val parsingWorkRequest = OneTimeWorkRequestBuilder<FindDrawWorker>()
-                    .build()
-                WorkManager.getInstance(context).enqueue(parsingWorkRequest)
-            }
-            // 특정 상품의 알림을 울림
-            else if (intent.action == Contents.INTENT_ACTION_PRODUCT_ALARM) {
-                // 상품의 대한 알림을 울림
-                val dataPosition = intent.getIntExtra(Contents.INTENT_KEY_POSITION, -1)
-                Log.i("Check3", "동작")
-
-                if (dataPosition != -1) {
-                    Log.i("Check4", "동작 ${dataPosition}")
-                    val productNotifyWorkRequest = OneTimeWorkRequestBuilder<ProductNotifyWorker>()
-                        .setInputData(workDataOf(Contents.WORKER_INPUT_DATA_KEY to dataPosition))
-                        .build()
-                    WorkManager.getInstance(context).enqueue(productNotifyWorkRequest)
-                }
-            }
-        }
-    }
-
-    // 알람 재설정
-    private fun reSetAlarm(context: Context) {
-        Log.i("Check", "동작")
-
-        val mSharedPreferences =
-            context.getSharedPreferences(Contents.PREFERENCE_NAME_TIME, Context.MODE_PRIVATE)
-        var timeTrigger = mSharedPreferences.getLong(Contents.SYNC_ALARM_KEY, 0)
-
-        if (timeTrigger != 0.toLong()) {
-            Log.i("Check", "재설정")
-            while(timeTrigger < System.currentTimeMillis()) {
-                timeTrigger += 10800000
-            }
-
-            val mAlarmManager = context.getSystemService(Context.ALARM_SERVICE) as AlarmManager
-
-            val reIntent = Intent(context, MyAlarmReceiver::class.java).apply {
-                action = Contents.INTENT_ACTION_SYNC_ALARM
-            }
-
-            val alarmPendingIntent = PendingIntent.getBroadcast(
-                context,
-                Contents.SYNC_ALARM_CODE,
-                reIntent,
-                PendingIntent.FLAG_UPDATE_CURRENT
-            )
-
-            setPreference(mSharedPreferences, timeTrigger)
-            if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.M) {
-                mAlarmManager.setExactAndAllowWhileIdle(
-                    AlarmManager.RTC_WAKEUP,
-                    timeTrigger,
-                    alarmPendingIntent
-                )
-            } else {
-                mAlarmManager.setExact(
-                    AlarmManager.RTC_WAKEUP,
-                    timeTrigger,
-                    alarmPendingIntent
-                )
-            }
-        }
-    }
-
-    // 상품 알람 재설정
-    private fun reSetProductAlarm(context: Context) {
-        Log.i("Check2", "동작")
-        val mSharedPreferences =
-            context.getSharedPreferences(Contents.PREFERENCE_NAME_TIME, Context.MODE_PRIVATE)
-        mDao = MyDataBase.getDatabase(context)!!.getDao()
-
-        CoroutineScope(Dispatchers.IO).launch {
-            for (position in mDao.getAllSpecialShoesData().indices) {
-                val shoesData = mDao.getAllSpecialShoesData()[position]
-                val preferenceKey = "${shoesData.ShoesTitle}-${shoesData.ShoesSubTitle}"
-                val timeTrigger = mSharedPreferences.getLong(preferenceKey, 0)
-
-                if (timeTrigger != 0L) {
-                    Log.i("CheckTime", "${timeTrigger}")
-                    if (timeTrigger < System.currentTimeMillis()) {
-                        deleteDrawShoesData(mSharedPreferences, shoesData, context)
-                        continue
-                    }
-
-                    val mAlarmManager =
-                        context.getSystemService(Context.ALARM_SERVICE) as AlarmManager
-
-                    val reIntent = Intent(context, MyAlarmReceiver::class.java).apply {
-                        action = Contents.INTENT_ACTION_PRODUCT_ALARM
-                        putExtra(Contents.INTENT_KEY_POSITION, position)
-                    }
-
-                    val alarmPendingIntent = PendingIntent.getBroadcast(
-                        context,
-                        position,
-                        reIntent,
-                        PendingIntent.FLAG_UPDATE_CURRENT
-                    )
-
-                    if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.M) {
-                        mAlarmManager.setExactAndAllowWhileIdle(
-                            AlarmManager.RTC_WAKEUP,
-                            timeTrigger,
-                            alarmPendingIntent
-                        )
-                    } else {
-                        mAlarmManager.setExact(
-                            AlarmManager.RTC_WAKEUP,
-                            timeTrigger,
-                            alarmPendingIntent
-                        )
-                    }
-                }
-            }
-        }
-    }
-
-    // 데이터베이스 설정
-    private fun setPreference(preference: SharedPreferences, timeTrigger: Long) {
-        with(preference.edit()) {
-            putLong(Contents.SYNC_ALARM_KEY, timeTrigger)
-            commit()
-        }
-    }
-
-    private fun deleteDrawShoesData(preference: SharedPreferences, data: SpecialShoesDataModel, context: Context) {
-        val allowAlarmPreference = context.getSharedPreferences(Contents.PREFERENCE_NAME_ALLOW_ALARM, Context.MODE_PRIVATE)
-
-        with(preference.edit()) {
-            remove("${data.ShoesTitle}-${data.ShoesSubTitle}")
-            commit()
-        }
-
-        with(allowAlarmPreference.edit()) {
-            remove("${data.ShoesTitle}-${data.ShoesSubTitle}")
-            commit()
-        }
-
-        CoroutineScope(Dispatchers.IO).launch {
-            mDao.deleteSpecialData(data.ShoesUrl!!)
-        }
-    }
-}
Index: app/src/main/java/com/nikealarm/nikedrawalarm/component/GetImageWorker.kt
===================================================================
--- app/src/main/java/com/nikealarm/nikedrawalarm/component/GetImageWorker.kt	(revision b3f4dce6bbc1f64b2f120ac4dc054823810b53e9)
+++ app/src/main/java/com/nikealarm/nikedrawalarm/component/GetImageWorker.kt	(revision b3f4dce6bbc1f64b2f120ac4dc054823810b53e9)
@@ -1,44 +0,0 @@
-package com.nikealarm.nikedrawalarm.component
-
-import android.content.Context
-import android.util.Log
-import androidx.work.Worker
-import androidx.work.WorkerParameters
-import androidx.work.workDataOf
-import com.nikealarm.nikedrawalarm.other.Contents
-import org.jsoup.Jsoup
-
-class GetImageWorker(context: Context, workerParams: WorkerParameters) : Worker(context,
-    workerParams
-) {
-    private val imageMutableList = mutableListOf<String>()
-
-    override fun doWork(): Result {
-        val url = inputData.getString(Contents.WORKER_GET_IMAGE_INPUT_KEY)
-
-        if(url != null) {
-            parsing(url)
-
-            if(imageMutableList.size != 0) {
-                return Result.success(workDataOf(Contents.WORKER_GET_IMAGE_OUTPUT_KEY to imageMutableList.toTypedArray()))
-            }
-        }
-
-        return Result.failure()
-    }
-
-    private fun parsing(url: String) {
-        val doc = Jsoup.connect(url)
-            .userAgent("19.0.1.84.52")
-            .get()
-
-        val elementsData = doc.select("li.uk-width-1-2")
-        for(elementData in elementsData) {
-            val imageUrl = elementData.select("img")
-                .attr("src")
-
-            imageMutableList.add(imageUrl)
-            Log.i("Check", "${imageMutableList.size}")
-        }
-    }
-}
\ No newline at end of file
Index: app/src/main/java/com/nikealarm/nikedrawalarm/ui/fragment/UpcomingListFragment.kt
===================================================================
--- app/src/main/java/com/nikealarm/nikedrawalarm/ui/fragment/UpcomingListFragment.kt	(revision b3f4dce6bbc1f64b2f120ac4dc054823810b53e9)
+++ app/src/main/java/com/nikealarm/nikedrawalarm/ui/fragment/UpcomingListFragment.kt	(revision b3f4dce6bbc1f64b2f120ac4dc054823810b53e9)
@@ -1,356 +0,0 @@
-package com.nikealarm.nikedrawalarm.ui.fragment
-
-import android.app.AlarmManager
-import android.app.Dialog
-import android.app.PendingIntent
-import android.content.Context
-import android.content.Intent
-import android.graphics.Color
-import android.os.Build
-import android.os.Bundle
-import android.util.Log
-import android.view.LayoutInflater
-import android.view.MenuItem
-import android.view.View
-import android.view.ViewGroup
-import android.widget.AdapterView
-import android.widget.ArrayAdapter
-import android.widget.TextView
-import android.widget.Toast
-import androidx.fragment.app.Fragment
-import androidx.lifecycle.Observer
-import androidx.lifecycle.ViewModelProvider
-import androidx.navigation.fragment.findNavController
-import androidx.paging.PagedList
-import androidx.recyclerview.widget.LinearLayoutManager
-import androidx.recyclerview.widget.SimpleItemAnimator
-import com.nikealarm.nikedrawalarm.R
-import com.nikealarm.nikedrawalarm.adapter.SpecialShoesListAdapter
-import com.nikealarm.nikedrawalarm.component.MyAlarmReceiver
-import com.nikealarm.nikedrawalarm.database.EventDay
-import com.nikealarm.nikedrawalarm.database.ShoesDataModel
-import com.nikealarm.nikedrawalarm.database.SpecialShoesDataModel
-import com.nikealarm.nikedrawalarm.other.Contents
-import com.nikealarm.nikedrawalarm.ui.MainActivity
-import com.nikealarm.nikedrawalarm.ui.dialog.AlarmDialog
-import com.nikealarm.nikedrawalarm.viewmodel.MyViewModel
-import kotlinx.android.synthetic.main.fragment_upcoming_list.*
-import java.util.*
-
-class UpcomingListFragment : Fragment(), SpecialShoesListAdapter.AlarmListener {
-
-    private lateinit var mViewModel: MyViewModel
-    private lateinit var mAdapter: SpecialShoesListAdapter
-
-    private var isStarted = false
-    private lateinit var specialShoesList: PagedList<SpecialShoesDataModel>
-
-    override fun onCreateView(
-        inflater: LayoutInflater,
-        container: ViewGroup?,
-        savedInstanceState: Bundle?
-    ): View? {
-        setHasOptionsMenu(true)
-        return inflater.inflate(R.layout.fragment_upcoming_list, container, false)
-    }
-
-    // 시작
-    override fun onViewCreated(view: View, savedInstanceState: Bundle?) {
-        super.onViewCreated(view, savedInstanceState)
-
-        // 인스턴스 설정
-        mViewModel = ViewModelProvider(this)[MyViewModel::class.java]
-        mAdapter = SpecialShoesListAdapter(requireContext()).apply {
-            setHasStableIds(true)
-            setOnAlarmListener(this@UpcomingListFragment)
-        }
-        val spinnerAdapter = ArrayAdapter<String>(requireContext(), android.R.layout.simple_spinner_dropdown_item, listOf("DEFAULT", "DRAW", "COMING"))
-
-        // 옵저버 설정
-        mViewModel.specialShoesList.observe(viewLifecycleOwner, Observer {
-            mAdapter.submitList(it)
-
-            if(!isStarted) {
-                specialShoesList = it
-                isStarted = true
-            }
-
-            if (it.size == 0) {
-                appearText()
-            } else {
-                if (upcomingFrag_noitemText.isEnabled) {
-                    disappearText()
-                }
-            }
-        })
-
-        // 뷰 설정
-        with(upcomingFrag_toolbar) {  // 툴바
-            (requireActivity() as MainActivity).setSupportActionBar(this)
-            (requireActivity() as MainActivity).supportActionBar?.setDisplayHomeAsUpEnabled(true)
-        }
-        with(upcomingFrag_spinner) { // 스피너
-            adapter = spinnerAdapter
-            onItemSelectedListener = object : AdapterView.OnItemSelectedListener {
-                override fun onItemSelected(adapterView: AdapterView<*>?, v: View?, pos: Int, id: Long) {
-                    mViewModel.upcomingCategory.value = when(pos) {
-                        0 -> "DEFAULT"
-                        1 -> ShoesDataModel.CATEGORY_DRAW
-                        2 -> ShoesDataModel.CATEGORY_COMING_SOON
-                        else -> "DEFAULT"
-                    }
-
-                    mAdapter.changeCategory()
-
-                    v?.let {
-                        (v as TextView).setTextColor(Color.WHITE)
-                    }
-                }
-
-                override fun onNothingSelected(adapterView: AdapterView<*>?) {
-
-                }
-            }
-        }
-        with(upcomingFrag_list) { // 리사이클
-            adapter = mAdapter
-            layoutManager = LinearLayoutManager(requireContext())
-            setHasFixedSize(true)
-            (itemAnimator as SimpleItemAnimator).supportsChangeAnimations = false
-        }
-    }
-
-    override fun onOptionsItemSelected(item: MenuItem): Boolean {
-        return when(item.itemId) {
-            android.R.id.home -> {
-                findNavController().navigateUp()
-                true
-            }
-            else -> false
-        }
-    }
-
-    override fun onAlarmListener(
-        specialShoesData: SpecialShoesDataModel?,
-        pos: Int,
-        isChecked: Boolean
-    ) {
-        if(isChecked) { // 알림이 설정 되어있을 때
-            removeNotification(specialShoesData!!, pos)
-        } else { // 알림이 설정 되어있지 않을 때6
-            setNotification(specialShoesData!!, pos)
-        }
-    }
-
-    override fun onDestroy() {
-        super.onDestroy()
-        mViewModel.upcomingCategory.value = "DEFAULT"
-    }
-
-    // 알람 시작
-    // 알람 설정 알림창
-    private fun setNotification(specialShoesData: SpecialShoesDataModel, pos: Int) {
-        val timeTrigger = getTimeInMillis(
-            EventDay(
-            specialShoesData.SpecialMonth!!,
-            specialShoesData.SpecialDay!!,
-            specialShoesData.SpecialWhenEvent!!
-        )
-        )
-        AlarmDialog.getAlarmDialog("알림 설정", "이 상품의 알림을 설정하시겠습니까?")
-            .show(requireActivity().supportFragmentManager, AlarmDialog.ALARM_DIALOG_TAG)
-
-        AlarmDialog.setOnCheckClickListener(object : AlarmDialog.CheckClickListener {
-            override fun onCheckClickListener(dialog: Dialog) {
-                setAlarm(timeTrigger, specialShoesData)
-                setPreference("${specialShoesData.ShoesTitle}-${specialShoesData.ShoesSubTitle}", timeTrigger)
-
-                mAdapter.notifyItemChanged(pos)
-                dialog.dismiss()
-            }
-        })
-    }
-
-    // 알람 취소 알림창
-    private fun removeNotification(specialShoesData: SpecialShoesDataModel, pos: Int) {
-        AlarmDialog.getAlarmDialog("알림 설정", "이 상품의 알림을 취소하시겠습니까?")
-            .show(requireActivity().supportFragmentManager, AlarmDialog.ALARM_DIALOG_TAG)
-
-        AlarmDialog.setOnCheckClickListener(object : AlarmDialog.CheckClickListener {
-            override fun onCheckClickListener(dialog: Dialog) {
-                removeAlarm(specialShoesData)
-                removePreference("${specialShoesData.ShoesTitle}-${specialShoesData.ShoesSubTitle}")
-
-                mAdapter.notifyItemChanged(pos)
-                dialog.dismiss()
-            }
-        })
-    }
-
-    // 알람 설정
-    private fun setAlarm(timeTrigger: Long, specialShoesData: SpecialShoesDataModel) {
-        val index = specialShoesList.indexOf(specialShoesData)
-
-        if(index != -1) {
-            val alarmIntent = Intent(requireContext(), MyAlarmReceiver::class.java).apply {
-                action = Contents.INTENT_ACTION_PRODUCT_ALARM
-                putExtra(Contents.INTENT_KEY_POSITION, index)
-            }
-            val alarmPendingIntent = PendingIntent.getBroadcast(
-                requireContext(),
-                index,
-                alarmIntent,
-                PendingIntent.FLAG_UPDATE_CURRENT
-            )
-            val alarmManager = requireContext().getSystemService(Context.ALARM_SERVICE) as AlarmManager
-
-            if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.M) {
-                alarmManager.setExactAndAllowWhileIdle(
-                    AlarmManager.RTC_WAKEUP,
-                    timeTrigger,
-                    alarmPendingIntent
-                )
-            } else {
-                alarmManager.setExact(
-                    AlarmManager.RTC_WAKEUP,
-                    timeTrigger,
-                    alarmPendingIntent
-                )
-            }
-        }
-    }
-
-    // 알람 삭제
-    private fun removeAlarm(specialShoesData: SpecialShoesDataModel) {
-        val index = specialShoesList.indexOf(specialShoesData)
-
-        if(index != -1) {
-            val alarmIntent = Intent(requireContext(), MyAlarmReceiver::class.java).apply {
-                action = Contents.INTENT_ACTION_PRODUCT_ALARM
-                putExtra(Contents.INTENT_KEY_POSITION, index)
-            }
-
-            // 이미 설정된 알람이 있는지 확인
-            if (checkExistAlarm(alarmIntent, index)) {
-
-                // 설정된 알람이 있으면 삭제함
-                val alarmPendingIntent = PendingIntent.getBroadcast(
-                    requireContext(),
-                    index,
-                    alarmIntent,
-                    PendingIntent.FLAG_UPDATE_CURRENT
-                )
-
-                val alarmManager = requireContext().getSystemService(Context.ALARM_SERVICE) as AlarmManager
-                alarmManager.cancel(alarmPendingIntent)
-                alarmPendingIntent.cancel()
-
-                Log.i("RemoveAlarm", "동작")
-            }
-        }
-    }
-
-    // 알림 확인
-    private fun checkExistAlarm(mIntent: Intent, requestCode: Int): Boolean {
-        val alarmPendingIntent = PendingIntent.getBroadcast(
-            requireContext(),
-            requestCode,
-            mIntent,
-            PendingIntent.FLAG_NO_CREATE
-        )
-
-        return alarmPendingIntent?.let {
-            true
-        }?:let {
-            false
-        }
-    }
-
-    private fun getTimeInMillis(eventDay: EventDay): Long {
-        val month = if(eventDay.eventMonth[1].toString() != "월") {
-            "${eventDay.eventMonth[0]}${eventDay.eventMonth[1]}".toIntOrNull() // 10월, 11월, 12월 처리
-        } else {
-            eventDay.eventMonth[0].toString().toIntOrNull()
-        }
-        val day = eventDay.eventDay.toIntOrNull()
-
-        val time = eventDay.eventTime.substring(2, 8).trim().split(":")
-        val hour = time[0].toIntOrNull()
-        val minute = time[1].toIntOrNull()
-
-        val mCalendar = Calendar.getInstance().apply {
-            if (month != null && day != null && hour != null && minute != null) {
-                set(Calendar.MONTH, month - 1)
-                set(Calendar.DAY_OF_MONTH, day)
-                set(Calendar.HOUR_OF_DAY, hour)
-                set(Calendar.MINUTE, minute)
-                set(Calendar.SECOND, 0)
-                set(Calendar.MILLISECOND, 0)
-            }
-        }
-
-        return mCalendar.timeInMillis
-    }
-
-    // 데이터베이스에 저장
-    private fun setPreference(preferenceKey: String?, timeTrigger: Long) {
-        val allowAlarmPreference = requireContext().getSharedPreferences(
-            Contents.PREFERENCE_NAME_ALLOW_ALARM,
-            Context.MODE_PRIVATE
-        )
-        val timeSharedPreference =
-            requireContext().getSharedPreferences(Contents.PREFERENCE_NAME_TIME, Context.MODE_PRIVATE)
-
-        with(timeSharedPreference.edit()) {
-            putLong(preferenceKey, timeTrigger)
-            commit()
-        }
-
-        with(allowAlarmPreference.edit()) {
-            this.putBoolean(preferenceKey, true)
-            this.commit()
-        }
-    }
-
-    private fun removePreference(preferenceKey: String?) {
-        val allowAlarmPreference = requireContext().getSharedPreferences(
-            Contents.PREFERENCE_NAME_ALLOW_ALARM,
-            Context.MODE_PRIVATE
-        )
-        val timeSharedPreference =
-            requireContext().getSharedPreferences(Contents.PREFERENCE_NAME_TIME, Context.MODE_PRIVATE)
-
-        with(timeSharedPreference.edit()) {
-            this.remove(preferenceKey)
-            commit()
-        }
-
-        with(allowAlarmPreference.edit()) {
-            this.remove(preferenceKey)
-            this.commit()
-        }
-    }
-    // 알람 끝
-
-    // 애니메이션 설정 시작
-    private fun appearText() {
-        with(upcomingFrag_noitemText) {
-            isEnabled = true
-
-            animate().setDuration(350)
-                .alpha(1f)
-                .withLayer()
-        }
-    }
-
-    private fun disappearText() {
-        with(upcomingFrag_noitemText) {
-            isEnabled = false
-
-            animate().setDuration(100)
-                .alpha(0f)
-                .withLayer()
-        }
-    }
-    // 애니메이션 설정 끝
-}
\ No newline at end of file
Index: app/src/main/java/com/nikealarm/nikedrawalarm/component/FindDrawWorker.kt
===================================================================
--- app/src/main/java/com/nikealarm/nikedrawalarm/component/FindDrawWorker.kt	(revision b3f4dce6bbc1f64b2f120ac4dc054823810b53e9)
+++ app/src/main/java/com/nikealarm/nikedrawalarm/component/FindDrawWorker.kt	(revision b3f4dce6bbc1f64b2f120ac4dc054823810b53e9)
@@ -1,270 +0,0 @@
-package com.nikealarm.nikedrawalarm.component
-
-import android.app.NotificationChannel
-import android.app.NotificationManager
-import android.app.PendingIntent
-import android.content.Context
-import android.content.Intent
-import android.os.Build
-import androidx.core.app.NotificationCompat
-import androidx.core.app.NotificationManagerCompat
-import androidx.work.Worker
-import androidx.work.WorkerParameters
-import com.nikealarm.nikedrawalarm.R
-import com.nikealarm.nikedrawalarm.database.SpecialDataModel
-import com.nikealarm.nikedrawalarm.database.MyDataBase
-import com.nikealarm.nikedrawalarm.database.ShoesDataModel
-import com.nikealarm.nikedrawalarm.database.SpecialShoesDataModel
-import com.nikealarm.nikedrawalarm.other.Contents
-import com.nikealarm.nikedrawalarm.ui.MainActivity
-import com.squareup.picasso.Picasso
-import org.jsoup.Jsoup
-
-class FindDrawWorker(context: Context, workerParams: WorkerParameters) : Worker(
-    context,
-    workerParams
-) {
-    private val mContext = context
-    private val mDao = MyDataBase.getDatabase(mContext)!!.getDao()
-
-    private val allShoesList = mutableListOf<ShoesDataModel>()
-
-    override fun doWork(): Result {
-        parseData()
-
-        return Result.success()
-    }
-
-    // 크롤링
-    private fun parseData() {
-        parseReleasedData()
-        parseSpecialData()
-//        repeatNotification()
-
-        checkSpecialData()
-    }
-
-    // FEED 파싱
-    private fun parseReleasedData() {
-        val url = "https://www.nike.com/kr/launch/?type=feed"
-        val doc = Jsoup.connect(url) // nike UPCOMING 창을 읽어옴
-            .userAgent("19.0.1.84.52")
-            .get()
-        val elementsData = doc.select("div.launch-list-item")
-
-        for (elementData in elementsData) {
-            val shoesInfo = elementData.select("div.info-sect") // 신발 정보
-                .select("div.btn-box")
-                .select("span")
-                .text()
-
-            if (shoesInfo == "LEARN MORE") {
-                continue
-            }
-
-            val shoesSubTitle = elementData.select("div.text-box")
-                .select("p.txt-subject")
-                .text()
-            val shoesTitle = elementData.select("div.text-box")
-                .select("p.txt-description")
-                .text()
-            val innerUrl = "https://www.nike.com" + elementData.select("a")
-                .attr("href") // 해당 draw 링크창을 읽어옴
-
-            // draw가 없을 시
-            if (!mDao.getAllShoesData().contains(ShoesDataModel(0, shoesSubTitle, shoesTitle))) {
-                if (shoesInfo == "THE DRAW 진행예정") {
-                    val innerDoc = Jsoup.connect(innerUrl)
-                        .userAgent("19.0.1.84.52")
-                        .get()
-
-                    // 신발 정보를 가져옴
-                    val shoesPrice = "가격 : " + innerDoc.select("div.price") // draw 신발 가격
-                        .text()
-                    val shoesImageUrl = innerDoc.select("li.uk-width-1-2") // draw 신발 이미지
-                        .select("img")
-                        .eq(0)
-                        .attr("src")
-
-                    val innerElementData = innerDoc.select("span.uk-text-bold")
-
-                    var howToEvent = "" // 이벤트 참여방법
-                    for (j in 0..2) {
-                        howToEvent += innerElementData.select("p")
-                            .eq(j)
-                            .text() + "\n"
-                    }
-
-                    howToEvent += shoesPrice
-
-                    val shoesData =
-                        ShoesDataModel(
-                            null,
-                            shoesSubTitle,
-                            shoesTitle,
-                            howToEvent,
-                            shoesImageUrl,
-                            innerUrl,
-                            ShoesDataModel.CATEGORY_DRAW
-                        )
-
-                    insertShoesData(shoesData)
-                }
-            }
-
-            allShoesList.add(ShoesDataModel(0, shoesSubTitle, shoesTitle, null, null, innerUrl))
-        }
-    }
-
-    // UPCOMING 파싱
-    private fun parseSpecialData() {
-        val url = "https://www.nike.com/kr/launch/?type=upcoming&activeDate=date-filter:AFTER"
-        val doc = Jsoup.connect(url) // nike UPCOMING창을 읽어옴
-            .userAgent("19.0.1.84.52")
-            .get()
-        val elementsData = doc.select("div.launch-list-item")
-        var channelId = 0
-
-        for (elementData in elementsData) {
-            val category = elementData.select("div.info-sect")
-                .select("div.btn-box")
-                .select("span.btn-link")
-                .text()
-            val specialUrl = "https://www.nike.com" + elementData.select("a").attr("href")
-
-            if (category != "THE DRAW 진행예정" || mDao.getAllSpecialData()
-                    .contains(SpecialDataModel(0, specialUrl))
-            ) { // DRAW가 아니고 이미 데이터가 존재할 시
-                continue
-            }
-
-            val month = elementData.select("div.img-sect")
-                .select("div.date")
-                .select("span.month")
-                .text()
-            val day = elementData.select("div.img-sect")
-                .select("div.date")
-                .select("span.day")
-                .text()
-            val whenStartEvent = elementData.select("div.info-sect")
-                .select("div.text-box")
-                .select("p.txt-subject")
-                .text()
-            val order = "${month.split("월")[0]}${day}".toInt()
-
-            val specialShoesData = SpecialDataModel(
-                null,
-                specialUrl,
-                month,
-                day,
-                whenStartEvent,
-                order
-            )
-
-            insertSpecialShoesData(specialShoesData)
-
-            val index = mDao.getAllSpecialShoesData().indexOf(SpecialShoesDataModel(0, "", "", null, null, specialUrl))
-            createNotification(mDao.getAllSpecialShoesData()[index], channelId)
-
-            channelId++
-        }
-    }
-
-    private fun repeatNotification() { // DRAW 데이터들을 알림 생성 메서드로 보냄
-        for (channelId in mDao.getAllSpecialShoesData().indices) {
-            val specialShoes = mDao.getAllSpecialShoesData()[channelId]
-            createNotification(specialShoes, channelId)
-        }
-    }
-
-    // 알림 생성
-    private fun createNotification(data: SpecialShoesDataModel, channelId: Int) {
-        val vibrate = LongArray(4).apply {
-            set(0, 0)
-            set(1, 100)
-            set(2, 200)
-            set(3, 300)
-        }
-
-        // 자세히 보기
-        val learnMoreIntent = Intent(mContext, MainActivity::class.java).apply {
-            action = Contents.INTENT_ACTION_GOTO_WEBSITE
-            putExtra(Contents.CHANNEL_ID, channelId)
-            putExtra(Contents.DRAW_URL, data.ShoesUrl)
-        }
-        val setAlarmIntent = Intent(mContext, MainActivity::class.java).apply { // 알림 설정하기
-            action = Contents.INTENT_ACTION_GOTO_DRAWLIST
-        }
-
-        val learnMorePendingIntent = PendingIntent.getActivity(
-            mContext,
-            channelId,
-            learnMoreIntent,
-            PendingIntent.FLAG_ONE_SHOT
-        )
-        val setAlarmPendingIntent =
-            PendingIntent.getActivity(mContext, 100, setAlarmIntent, PendingIntent.FLAG_ONE_SHOT)
-
-        val bitmap = Picasso.get().load(data.ShoesImageUrl).get()
-        val notificationBuilder = NotificationCompat.Builder(mContext, "Default")
-            .setSmallIcon(R.mipmap.ic_launcher)
-            .setContentTitle("${data.ShoesSubTitle} - ${data.ShoesTitle}")
-            .setVibrate(vibrate)
-            .setLargeIcon(bitmap)
-            .setStyle(NotificationCompat.BigTextStyle())
-            .setStyle(
-                NotificationCompat.BigPictureStyle()
-                    .bigPicture(bitmap)
-                    .bigLargeIcon(null)
-            )
-            .setContentText(data.ShoesPrice!!.split("\n")[0])
-            .setAutoCancel(true)
-            .addAction(0, "자세히 보기", learnMorePendingIntent)
-            .addAction(0, "알림 설정하기", setAlarmPendingIntent)
-
-        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.O) {
-            val channel = NotificationChannel(
-                "Default",
-                data.ShoesTitle,
-                NotificationManager.IMPORTANCE_DEFAULT
-            )
-            val notificationManager =
-                mContext.getSystemService(Context.NOTIFICATION_SERVICE) as NotificationManager
-
-            notificationManager.createNotificationChannel(channel)
-        }
-
-        with(NotificationManagerCompat.from(mContext)) {
-            notify(channelId, notificationBuilder.build())
-        }
-    }
-
-    // 데이터베이스 접근
-    private fun insertSpecialShoesData(insertData: SpecialDataModel) {
-        mDao.insertSpecialData(insertData)
-    }
-
-    private fun insertShoesData(insertData: ShoesDataModel) {
-        mDao.insertShoesData(insertData)
-    }
-
-    private fun checkSpecialData() {
-        for (shoesData in mDao.getAllSpecialShoesData()) {
-            if (!allShoesList.contains(
-                    ShoesDataModel(
-                        0,
-                        shoesData.ShoesSubTitle,
-                        shoesData.ShoesTitle
-                    )
-                ) && shoesData.ShoesCategory == ShoesDataModel.CATEGORY_DRAW
-            ) {
-                deleteShoesData(shoesData)
-            }
-        }
-    }
-
-    private fun deleteShoesData(deleteData: SpecialShoesDataModel) {
-        mDao.deleteShoesData(deleteData.ShoesTitle, deleteData.ShoesSubTitle)
-        mDao.deleteSpecialData(deleteData.ShoesUrl!!)
-    }
-}
\ No newline at end of file
Index: app/src/main/java/com/nikealarm/nikedrawalarm/database/SpecialShoesDataModel.kt
===================================================================
--- app/src/main/java/com/nikealarm/nikedrawalarm/database/SpecialShoesDataModel.kt	(revision b3f4dce6bbc1f64b2f120ac4dc054823810b53e9)
+++ app/src/main/java/com/nikealarm/nikedrawalarm/database/SpecialShoesDataModel.kt	(revision b3f4dce6bbc1f64b2f120ac4dc054823810b53e9)
@@ -1,25 +0,0 @@
-package com.nikealarm.nikedrawalarm.database
-
-import androidx.room.Ignore
-
-data class SpecialShoesDataModel(
-    val ShoesId: Int?,
-    val ShoesSubTitle: String,
-    val ShoesTitle: String,
-    val ShoesPrice: String? = null,
-    val ShoesImageUrl: String? = null,
-    val ShoesUrl: String? = null,
-    val ShoesCategory: String? = null,
-    val SpecialMonth: String? = null,
-    val SpecialDay: String? = null,
-    val SpecialWhenEvent: String? = null,
-    val SpecialOrder: Int? = null
-) {
-    @Ignore
-    var isOpened = false
-
-    override fun equals(other: Any?): Boolean {
-        other as SpecialShoesDataModel
-        return (ShoesSubTitle == other.ShoesSubTitle && ShoesTitle == other.ShoesTitle) || ShoesUrl == other.ShoesUrl
-    }
-}
\ No newline at end of file
Index: app/src/main/java/com/nikealarm/nikedrawalarm/ui/MainActivity.kt
===================================================================
--- app/src/main/java/com/nikealarm/nikedrawalarm/ui/MainActivity.kt	(revision b3f4dce6bbc1f64b2f120ac4dc054823810b53e9)
+++ app/src/main/java/com/nikealarm/nikedrawalarm/ui/MainActivity.kt	(revision b3f4dce6bbc1f64b2f120ac4dc054823810b53e9)
@@ -1,59 +0,0 @@
-package com.nikealarm.nikedrawalarm.ui
-
-import android.app.NotificationManager
-import android.content.Context
-import android.content.Intent
-import androidx.appcompat.app.AppCompatActivity
-import android.os.Bundle
-import android.util.Log
-import androidx.navigation.fragment.findNavController
-import com.nikealarm.nikedrawalarm.R
-import com.nikealarm.nikedrawalarm.other.Contents
-import kotlinx.android.synthetic.main.activity_main.*
-
-/*
-* 자동응모 기능
-* UPCOMING 정보 시 분 초 표시 (서버 필요)
-* 진행중인 상품 알려주기
-* UI 수정 및 최적화
-* 코드 최적화
-* */
-class MainActivity : AppCompatActivity() {
-
-    override fun onCreate(savedInstanceState: Bundle?) {
-        super.onCreate(savedInstanceState)
-        setContentView(R.layout.activity_main)
-
-        // 기존의 알림창이 존재 했을 때 알림창을 제거함
-        ifNeedToMoveFragment(intent)
-        cancelNotification()
-    }
-
-    override fun onNewIntent(intent: Intent?) {
-        super.onNewIntent(intent)
-        ifNeedToMoveFragment(intent)
-    }
-
-    private fun ifNeedToMoveFragment(intent: Intent?) {
-        if(intent?.action == Contents.INTENT_ACTION_GOTO_WEBSITE) {
-            setIntent(intent)
-            cancelNotification()
-            nav_host_fragment.findNavController().navigate(R.id.action_global_mainFragment)
-        } else if(intent?.action == Contents.INTENT_ACTION_GOTO_DRAWLIST) {
-            setIntent(intent)
-            cancelNotification()
-            nav_host_fragment.findNavController().navigate(R.id.action_global_drawListFragment)
-        }
-    }
-
-    private fun cancelNotification() {
-        val closeChannelId = intent.getIntExtra(Contents.CHANNEL_ID, -1)
-        val notificationManager = getSystemService(Context.NOTIFICATION_SERVICE) as NotificationManager
-
-        if(closeChannelId != -1) {
-            notificationManager.cancel(closeChannelId)
-        } else {
-            notificationManager.cancelAll()
-        }
-    }
-}
\ No newline at end of file
Index: app/src/main/java/com/nikealarm/nikedrawalarm/ui/dialog/AlarmDialog.kt
===================================================================
--- app/src/main/java/com/nikealarm/nikedrawalarm/ui/dialog/AlarmDialog.kt	(revision b3f4dce6bbc1f64b2f120ac4dc054823810b53e9)
+++ app/src/main/java/com/nikealarm/nikedrawalarm/ui/dialog/AlarmDialog.kt	(revision b3f4dce6bbc1f64b2f120ac4dc054823810b53e9)
@@ -1,64 +0,0 @@
-package com.nikealarm.nikedrawalarm.ui.dialog
-
-import android.app.Dialog
-import android.graphics.Color
-import android.graphics.drawable.ColorDrawable
-import android.os.Bundle
-import android.view.LayoutInflater
-import android.view.View
-import android.view.ViewGroup
-import androidx.fragment.app.DialogFragment
-import com.nikealarm.nikedrawalarm.R
-import kotlinx.android.synthetic.main.dialog_notification.*
-
-class AlarmDialog : DialogFragment() {
-
-    companion object {
-        const val ALARM_DIALOG_TAG = "ALARM_DIALOG_TAG"
-
-        private lateinit var mListener: CheckClickListener
-
-        private lateinit var title: String
-        private lateinit var message: String
-
-        fun setOnCheckClickListener(_listener: CheckClickListener) {
-            mListener = _listener
-        }
-
-        fun getAlarmDialog(_title: String, _message: String): DialogFragment {
-            title = _title
-            message = _message
-
-            return AlarmDialog()
-        }
-    }
-
-    interface CheckClickListener {
-        fun onCheckClickListener(dialog: Dialog)
-    }
-
-    override fun onCreateView(
-        inflater: LayoutInflater,
-        container: ViewGroup?,
-        savedInstanceState: Bundle?
-    ): View? {
-        dialog?.window?.setBackgroundDrawable(ColorDrawable(Color.TRANSPARENT))
-        return inflater.inflate(R.layout.dialog_notification, container, false)
-    }
-
-    // 시작
-    override fun onViewCreated(view: View, savedInstanceState: Bundle?) {
-        super.onViewCreated(view, savedInstanceState)
-
-        // 뷰 설정
-        notifyDialogFrag_titleText.text = title
-        notifyDialogFrag_messageText.text = message
-
-        notifyDialogFrag_cancelButton.setOnClickListener {
-            dialog?.dismiss()
-        }
-        notifyDialogFrag_checkButton.setOnClickListener {
-            mListener.onCheckClickListener(requireDialog())
-        }
-    }
-}
\ No newline at end of file
Index: app/src/main/java/com/nikealarm/nikedrawalarm/adapter/ShoesListAdapter.kt
===================================================================
--- app/src/main/java/com/nikealarm/nikedrawalarm/adapter/ShoesListAdapter.kt	(revision b3f4dce6bbc1f64b2f120ac4dc054823810b53e9)
+++ app/src/main/java/com/nikealarm/nikedrawalarm/adapter/ShoesListAdapter.kt	(revision b3f4dce6bbc1f64b2f120ac4dc054823810b53e9)
@@ -1,99 +0,0 @@
-package com.nikealarm.nikedrawalarm.adapter
-
-import android.content.Context
-import android.view.LayoutInflater
-import android.view.View
-import android.view.ViewGroup
-import android.widget.ImageView
-import android.widget.TextView
-import androidx.fragment.app.FragmentManager
-import androidx.paging.PagedListAdapter
-import androidx.recyclerview.widget.DiffUtil
-import androidx.recyclerview.widget.RecyclerView
-import com.bumptech.glide.Glide
-import com.nikealarm.nikedrawalarm.R
-import com.nikealarm.nikedrawalarm.database.ShoesDataModel
-
-class ShoesListAdapter(
-    private val mContext: Context,
-    private val fragmentManager: FragmentManager
-) :
-    PagedListAdapter<ShoesDataModel, ShoesListAdapter.DrawListViewHolder>(
-        diffCallback
-    ) {
-
-    private lateinit var itemListener: ItemClickListener
-    private lateinit var imageListener: ImageClickListener
-
-    interface ItemClickListener {
-        fun onClickItem(newUrl: String?)
-    }
-
-    interface ImageClickListener {
-        fun onClickImage(newUrl: String, shoesImageUrl: String, imageView: ImageView)
-    }
-
-    fun setOnItemClickListener(listener: ItemClickListener) {
-        itemListener = listener
-    }
-
-    fun setOnImageClickListener(listener: ImageClickListener) {
-        imageListener = listener
-    }
-
-    override fun onCreateViewHolder(parent: ViewGroup, viewType: Int): DrawListViewHolder {
-        val view =
-            LayoutInflater.from(parent.context).inflate(R.layout.shoes_listitem, parent, false)
-        return DrawListViewHolder(view)
-    }
-
-    override fun onBindViewHolder(holder: DrawListViewHolder, position: Int) {
-        holder.bindView(getItem(position))
-    }
-
-    inner class DrawListViewHolder(itemView: View) : RecyclerView.ViewHolder(itemView) {
-        val shoesImage = itemView.findViewById<ImageView>(R.id.drawList_imgItem)
-        val shoesSubTitleText = itemView.findViewById<TextView>(R.id.drawList_shoesSubTitle_text)
-        val shoesTitleText = itemView.findViewById<TextView>(R.id.drawList_shoesTitle_text)
-        val howToEventText = itemView.findViewById<TextView>(R.id.drawList_howToEvent_text)
-        val learnMoreText = itemView.findViewById<TextView>(R.id.drawList_learnMore_text)
-
-        fun bindView(data: ShoesDataModel?) {
-            with(shoesImage) {
-                Glide.with(mContext).load(data?.shoesImageUrl).into(this)
-                transitionName = data?.shoesUrl
-
-                setOnClickListener {
-                    imageListener.onClickImage(
-                        data?.shoesUrl!!,
-                        data.shoesImageUrl!!,
-                        shoesImage
-                    )
-                }
-            }
-            shoesSubTitleText.text = data?.shoesSubTitle
-            shoesTitleText.text = data?.shoesTitle
-            howToEventText.text = data?.shoesPrice
-
-            learnMoreText.setOnClickListener {
-                itemListener.onClickItem(data?.shoesUrl)
-            }
-        }
-    }
-
-    companion object {
-        private val diffCallback = object : DiffUtil.ItemCallback<ShoesDataModel>() {
-            override fun areItemsTheSame(
-                oldItem: ShoesDataModel,
-                newItem: ShoesDataModel
-            ): Boolean =
-                oldItem.id == newItem.id
-
-            override fun areContentsTheSame(
-                oldItem: ShoesDataModel,
-                newItem: ShoesDataModel
-            ): Boolean =
-                oldItem.shoesTitle == newItem.shoesTitle
-        }
-    }
-}
\ No newline at end of file
Index: app/src/main/java/com/nikealarm/nikedrawalarm/ui/fragment/SettingScreenPreference.kt
===================================================================
--- app/src/main/java/com/nikealarm/nikedrawalarm/ui/fragment/SettingScreenPreference.kt	(revision b3f4dce6bbc1f64b2f120ac4dc054823810b53e9)
+++ app/src/main/java/com/nikealarm/nikedrawalarm/ui/fragment/SettingScreenPreference.kt	(revision b3f4dce6bbc1f64b2f120ac4dc054823810b53e9)
@@ -1,193 +0,0 @@
-package com.nikealarm.nikedrawalarm.ui.fragment
-
-import android.app.AlarmManager
-import android.app.PendingIntent
-import android.content.Context
-import android.content.Intent
-import android.content.SharedPreferences
-import android.net.Uri
-import android.os.Build
-import android.os.Bundle
-import android.util.Log
-import androidx.preference.Preference
-import androidx.preference.PreferenceFragmentCompat
-import androidx.preference.SwitchPreferenceCompat
-import androidx.work.OneTimeWorkRequestBuilder
-import androidx.work.WorkManager
-import com.nikealarm.nikedrawalarm.BuildConfig
-import com.nikealarm.nikedrawalarm.component.MyAlarmReceiver
-import com.nikealarm.nikedrawalarm.R
-import com.nikealarm.nikedrawalarm.component.FindDrawWorker
-import com.nikealarm.nikedrawalarm.other.Contents
-import java.util.*
-
-class SettingScreenPreference : PreferenceFragmentCompat() {
-    private lateinit var mAlarmManager: AlarmManager
-    private lateinit var mSharedPreference: SharedPreferences
-
-    override fun onCreatePreferences(savedInstanceState: Bundle?, rootKey: String?) {
-        setPreferencesFromResource(R.xml.setting_screen, rootKey)
-
-        // 인스턴스 설정
-        mAlarmManager = context?.getSystemService(Context.ALARM_SERVICE) as AlarmManager
-        mSharedPreference = requireContext().getSharedPreferences(
-            Contents.PREFERENCE_NAME_TIME,
-            Context.MODE_PRIVATE
-        )
-
-        val showVersionPreference = findPreference<Preference>(getString(R.string.setting_preference_version))?.apply {
-            summary = BuildConfig.VERSION_NAME
-        }
-        // 알람 설정 스위치
-        val allowAlarmSwitch =
-            findPreference<SwitchPreferenceCompat>(getString(R.string.setting_preference_switchKey))?.apply {
-                setOnPreferenceClickListener {
-                    if (this.isChecked) {
-                        setAlarm()
-                    } else {
-                        removeAlarm()
-                    }
-                    true
-                }
-            }
-//        val shareDropDownPreference =
-//            findPreference<Preference>(getString(R.string.setting_preference_share))?.apply {
-//                setOnPreferenceClickListener {
-//                    shareIntent()
-//                    true
-//                }
-//            }
-        val emailDropDownPreference =
-            findPreference<Preference>(getString(R.string.setting_preference_email))?.apply {
-                setOnPreferenceClickListener {
-                    emailIntent()
-                    true
-                }
-            }
-    }
-
-    // 알람 설정
-    private fun setAlarm() {
-        val alarmIntent = Intent(context, MyAlarmReceiver::class.java).apply {
-            action = Contents.INTENT_ACTION_SYNC_ALARM
-        }
-
-        val mCalendar = Calendar.getInstance().apply {
-            val time = if(this.get(Calendar.HOUR_OF_DAY) == 24) {
-                3
-            } else {
-                this.get(Calendar.HOUR_OF_DAY) + 3
-            }
-            set(Calendar.HOUR_OF_DAY, time)
-            set(Calendar.MINUTE, 0)
-            set(Calendar.SECOND, 0)
-            set(Calendar.MILLISECOND, 0)
-        }
-
-        val timeTrigger = mCalendar.timeInMillis
-
-        val alarmPendingIntent = PendingIntent.getBroadcast(
-            context,
-            Contents.SYNC_ALARM_CODE,
-            alarmIntent,
-            PendingIntent.FLAG_UPDATE_CURRENT
-        )
-
-        // 오전 8시 알람 설정
-        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.M) {
-            mAlarmManager.setExactAndAllowWhileIdle(
-                AlarmManager.RTC_WAKEUP,
-                timeTrigger,
-                alarmPendingIntent
-            )
-        } else {
-            mAlarmManager.setExact(
-                AlarmManager.RTC_WAKEUP,
-                timeTrigger,
-                alarmPendingIntent
-            )
-        }
-        setPreference(timeTrigger)
-
-        // 테스트
-//        val parsingWorkRequest = OneTimeWorkRequestBuilder<FindDrawWorker>()
-//            .build()
-//        WorkManager.getInstance(requireContext()).enqueue(parsingWorkRequest)
-
-        Log.i("SetAlarm", "동작")
-    }
-
-    // 등록한 알람시간을 데이터베이스에 저장함
-    private fun setPreference(timeTrigger: Long) {
-        with(mSharedPreference.edit()) {
-            putLong(Contents.SYNC_ALARM_KEY, timeTrigger)
-            commit()
-        }
-    }
-
-    // 알람 지우기
-    private fun removeAlarm() {
-        val mIntent = Intent(context, MyAlarmReceiver::class.java).apply {
-            action = Contents.INTENT_ACTION_SYNC_ALARM
-        }
-
-        // 이미 설정된 알람이 있는지 확인
-        if (checkExistAlarm(mIntent)) {
-
-            // 설정된 알람이 있으면 삭제함
-            val alarmPendingIntent = PendingIntent.getBroadcast(
-                context,
-                Contents.SYNC_ALARM_CODE,
-                mIntent,
-                PendingIntent.FLAG_UPDATE_CURRENT
-            )
-
-            mAlarmManager.cancel(alarmPendingIntent)
-            alarmPendingIntent.cancel()
-
-            Log.i("RemoveAlarm", "동작")
-        }
-        removePreference()
-    }
-
-    // 알림 확인
-    private fun checkExistAlarm(mIntent: Intent): Boolean {
-        val alarmPendingIntent = PendingIntent.getBroadcast(
-            context,
-            Contents.SYNC_ALARM_CODE,
-            mIntent,
-            PendingIntent.FLAG_NO_CREATE
-        )
-
-        return alarmPendingIntent?.let {
-            true
-        }?:let {
-            false
-        }
-    }
-
-    // 등록한 알람시간을 데이터베이스에서 지움
-    private fun removePreference() {
-        with(mSharedPreference.edit()) {
-            this.remove(Contents.SYNC_ALARM_KEY)
-            commit()
-        }
-    }
-
-    // 출시 후 수정하기
-    private fun shareIntent() {
-
-    }
-
-    private fun emailIntent() {
-        val intent = Intent(Intent.ACTION_SENDTO).apply {
-            val email = arrayOf(getString(R.string.developer_email))
-            data = Uri.parse("mailto:")
-            putExtra(Intent.EXTRA_EMAIL, email)
-        }
-
-        if (intent.resolveActivity(requireContext().packageManager) != null) {
-            startActivity(intent)
-        }
-    }
-}
\ No newline at end of file
Index: app/src/main/java/com/nikealarm/nikedrawalarm/viewmodel/MyRepository.kt
===================================================================
--- app/src/main/java/com/nikealarm/nikedrawalarm/viewmodel/MyRepository.kt	(revision b3f4dce6bbc1f64b2f120ac4dc054823810b53e9)
+++ app/src/main/java/com/nikealarm/nikedrawalarm/viewmodel/MyRepository.kt	(revision b3f4dce6bbc1f64b2f120ac4dc054823810b53e9)
@@ -1,28 +0,0 @@
-package com.nikealarm.nikedrawalarm.viewmodel
-
-import android.app.Application
-import androidx.lifecycle.LiveData
-import androidx.paging.LivePagedListBuilder
-import androidx.paging.PagedList
-import com.nikealarm.nikedrawalarm.database.MyDataBase
-import com.nikealarm.nikedrawalarm.database.ShoesDataModel
-import com.nikealarm.nikedrawalarm.database.SpecialDataModel
-import com.nikealarm.nikedrawalarm.database.SpecialShoesDataModel
-
-class MyRepository(application: Application) {
-    private val mDao = MyDataBase.getDatabase(application)!!.getDao()
-
-    // ShoesData
-    fun getShoesData(shoesCategory: String): LiveData<PagedList<ShoesDataModel>> {
-        return LivePagedListBuilder(mDao.getShoesData(shoesCategory), 20).build()
-    }
-
-    // SpecialShoesData
-    fun getAllSpecialShoesData(): LiveData<PagedList<SpecialShoesDataModel>> {
-        return LivePagedListBuilder(mDao.getAllSpecialShoesPagingData(), 20).build()
-    }
-
-    fun getSpecialShoesData(upcomingCategory: String): LiveData<PagedList<SpecialShoesDataModel>> {
-        return LivePagedListBuilder(mDao.getSpecialShoesPagingData(upcomingCategory), 20).build()
-    }
-}
\ No newline at end of file
Index: app/src/main/java/com/nikealarm/nikedrawalarm/database/ShoesDataModel.kt
===================================================================
--- app/src/main/java/com/nikealarm/nikedrawalarm/database/ShoesDataModel.kt	(revision b3f4dce6bbc1f64b2f120ac4dc054823810b53e9)
+++ app/src/main/java/com/nikealarm/nikedrawalarm/database/ShoesDataModel.kt	(revision b3f4dce6bbc1f64b2f120ac4dc054823810b53e9)
@@ -1,36 +0,0 @@
-package com.nikealarm.nikedrawalarm.database
-
-import androidx.room.ColumnInfo
-import androidx.room.Entity
-import androidx.room.PrimaryKey
-
-@Entity
-data class ShoesDataModel(
-    @PrimaryKey(autoGenerate = true)
-    @ColumnInfo(name = "ShoesId")
-    val id: Int?,
-    @ColumnInfo(name = "ShoesSubTitle")
-    val shoesSubTitle: String,
-    @ColumnInfo(name = "ShoesTitle")
-    val shoesTitle: String,
-    @ColumnInfo(name = "ShoesPrice")
-    val shoesPrice: String? = null,
-    @ColumnInfo(name = "ShoesImageUrl")
-    val shoesImageUrl: String? = null,
-    @ColumnInfo(name = "ShoesUrl")
-    val shoesUrl: String? = null,
-    @ColumnInfo(name = "ShoesCategory")
-    val shoesCategory: String? = null
-) {
-    override fun equals(other: Any?): Boolean {
-        other as ShoesDataModel
-        return (shoesSubTitle == other.shoesSubTitle && shoesTitle == other.shoesTitle) || shoesUrl == other.shoesUrl
-    }
-
-    companion object {
-        const val CATEGORY_DRAW = "DRAW"
-        const val CATEGORY_DRAW_END = "CATEGORY_DRAW_END"
-        const val CATEGORY_COMING_SOON = "COMING SOON"
-        const val CATEGORY_RELEASED = "RELEASED"
-    }
-}
\ No newline at end of file
Index: app/src/main/java/com/nikealarm/nikedrawalarm/ui/fragment/ImageListFragment.kt
===================================================================
--- app/src/main/java/com/nikealarm/nikedrawalarm/ui/fragment/ImageListFragment.kt	(revision b3f4dce6bbc1f64b2f120ac4dc054823810b53e9)
+++ app/src/main/java/com/nikealarm/nikedrawalarm/ui/fragment/ImageListFragment.kt	(revision b3f4dce6bbc1f64b2f120ac4dc054823810b53e9)
@@ -1,168 +0,0 @@
-package com.nikealarm.nikedrawalarm.ui.fragment
-
-import android.os.Bundle
-import android.util.Log
-import android.view.LayoutInflater
-import android.view.View
-import android.view.ViewGroup
-import android.widget.ImageButton
-import android.widget.ImageView
-import android.widget.LinearLayout
-import androidx.activity.OnBackPressedCallback
-import androidx.core.content.ContextCompat
-import androidx.fragment.app.Fragment
-import androidx.lifecycle.Observer
-import androidx.lifecycle.ViewModelProvider
-import androidx.navigation.fragment.findNavController
-import androidx.transition.TransitionInflater
-import androidx.viewpager2.widget.ViewPager2
-import androidx.work.*
-import com.bumptech.glide.Glide
-import com.nikealarm.nikedrawalarm.R
-import com.nikealarm.nikedrawalarm.adapter.ImageListPagerAdapter
-import com.nikealarm.nikedrawalarm.component.GetImageWorker
-import com.nikealarm.nikedrawalarm.other.Contents
-import com.nikealarm.nikedrawalarm.viewmodel.MyViewModel
-import kotlinx.android.synthetic.main.fragment_image_list.*
-
-class ImageListFragment : Fragment() {
-    private lateinit var mViewModel: MyViewModel
-    private lateinit var dots: Array<ImageView?>
-
-    private lateinit var viewPager: ViewPager2
-    private lateinit var sliderDotspanel: LinearLayout
-
-    override fun onCreate(savedInstanceState: Bundle?) {
-        super.onCreate(savedInstanceState)
-        sharedElementEnterTransition =
-            TransitionInflater.from(requireContext()).inflateTransition(R.transition.image_shared_element_transition)
-        sharedElementReturnTransition =
-            TransitionInflater.from(requireContext()).inflateTransition(R.transition.image_shared_return_element_transition)
-    }
-
-    override fun onCreateView(
-        inflater: LayoutInflater,
-        container: ViewGroup?,
-        savedInstanceState: Bundle?
-    ): View? {
-        mViewModel = ViewModelProvider(requireActivity())[MyViewModel::class.java]
-        val getImageWork = OneTimeWorkRequestBuilder<GetImageWorker>()
-            .addTag(Contents.WORKER_GET_IMAGE)
-            .setInputData(workDataOf(Contents.WORKER_GET_IMAGE_INPUT_KEY to mViewModel.getUrl().value))
-            .build()
-
-        WorkManager.getInstance(requireContext())
-            .enqueueUniqueWork(Contents.WORKER_GET_IMAGE, ExistingWorkPolicy.KEEP, getImageWork)
-
-        activity?.onBackPressedDispatcher?.addCallback(backPressed)
-        return inflater.inflate(R.layout.fragment_image_list, container, false)
-    }
-
-    // 시작
-    override fun onViewCreated(view: View, savedInstanceState: Bundle?) {
-        super.onViewCreated(view, savedInstanceState)
-
-        // id 설정
-        with(imageListFrag_firstImage) {
-//            Picasso.get().load(mViewModel.shoesImageUrl.value).into(this)
-            Glide.with(context).load(mViewModel.shoesImageUrl.value).into(this)
-            transitionName = mViewModel.getUrl().value
-        }
-        viewPager = view.findViewById(R.id.imageListFrag_viewpager)
-        sliderDotspanel = view.findViewById(R.id.imageListFrag_sliderDots)
-        val cancelBtn = view.findViewById<ImageButton>(R.id.imageListFrag_cancelBtn).apply {
-            setOnClickListener {
-                exitFragment()
-            }
-        }
-
-        // 옵저버 설정
-        WorkManager.getInstance(requireContext())
-            .getWorkInfosByTagLiveData(Contents.WORKER_GET_IMAGE)
-            .observe(viewLifecycleOwner, Observer {
-                if (it[0].state == WorkInfo.State.SUCCEEDED) {
-                    val imageList =
-                        it[0].outputData.getStringArray(Contents.WORKER_GET_IMAGE_OUTPUT_KEY)
-                    val dotsCount = imageList!!.size
-
-                    Log.i("Check", "${imageList.size}")
-                    setDots(dotsCount)
-                    val viewPagerAdapter = ImageListPagerAdapter(imageList as Array<String>)
-
-                    viewPager.adapter = viewPagerAdapter
-                    setData()
-                }
-            })
-    }
-
-    // 데이터가 준비 되었을 시
-    private fun setData() {
-        imageListFrag_firstImage.visibility = View.GONE
-        imageListFrag_layout.visibility = View.VISIBLE
-    }
-
-    private fun resetData() {
-        imageListFrag_firstImage.visibility = View.VISIBLE
-        imageListFrag_layout.visibility = View.GONE
-    }
-
-    private fun setDots(size: Int) {
-        dots = arrayOfNulls(size)
-
-        for (i in 0 until size) {
-            dots[i] = ImageView(requireContext())
-            dots[i]?.setImageDrawable(
-                ContextCompat.getDrawable(
-                    requireContext(),
-                    R.drawable.non_active_dot_shape
-                )
-            )
-
-            val params = LinearLayout.LayoutParams(
-                LinearLayout.LayoutParams.WRAP_CONTENT,
-                LinearLayout.LayoutParams.WRAP_CONTENT
-            ).apply {
-                setMargins(8, 0, 8, 0)
-            }
-
-            sliderDotspanel.addView(dots[i], params)
-        }
-
-        viewPager.registerOnPageChangeCallback(object : ViewPager2.OnPageChangeCallback() {
-
-            override fun onPageSelected(position: Int) {
-                super.onPageSelected(position)
-                for (i in 0 until size) {
-                    dots[i]?.setImageDrawable(
-                        ContextCompat.getDrawable(
-                            requireContext(),
-                            R.drawable.non_active_dot_shape
-                        )
-                    )
-                }
-
-                dots[position]?.setImageDrawable(
-                    ContextCompat.getDrawable(
-                        requireContext(),
-                        R.drawable.active_dot_shape
-                    )
-                )
-            }
-        })
-    }
-
-    private fun exitFragment() {
-        backPressed.isEnabled = false
-
-        resetData()
-        findNavController().navigateUp()
-    }
-
-    private val backPressed = object : OnBackPressedCallback(true) {
-
-        override fun handleOnBackPressed() {
-            exitFragment()
-        }
-
-    }
-}
\ No newline at end of file
Index: app/src/main/java/com/nikealarm/nikedrawalarm/component/ParsingWorker.kt
===================================================================
--- app/src/main/java/com/nikealarm/nikedrawalarm/component/ParsingWorker.kt	(revision b3f4dce6bbc1f64b2f120ac4dc054823810b53e9)
+++ app/src/main/java/com/nikealarm/nikedrawalarm/component/ParsingWorker.kt	(revision b3f4dce6bbc1f64b2f120ac4dc054823810b53e9)
@@ -1,328 +0,0 @@
-package com.nikealarm.nikedrawalarm.component
-
-import android.content.Context
-import android.util.Log
-import androidx.work.Worker
-import androidx.work.WorkerParameters
-import androidx.work.workDataOf
-import com.nikealarm.nikedrawalarm.database.Dao
-import com.nikealarm.nikedrawalarm.database.SpecialDataModel
-import com.nikealarm.nikedrawalarm.database.MyDataBase
-import com.nikealarm.nikedrawalarm.database.ShoesDataModel
-import com.nikealarm.nikedrawalarm.other.Contents
-import org.jsoup.Jsoup
-
-class ParsingWorker(context: Context, workerParams: WorkerParameters) : Worker(
-    context,
-    workerParams
-) {
-    private lateinit var mDao: Dao
-
-    private val allShoesList = mutableListOf<ShoesDataModel>()
-
-    override fun doWork(): Result {
-        mDao = MyDataBase.getDatabase(applicationContext)!!.getDao()
-
-        parsingData() // 데이터를 파싱함
-        if(isStopped) { // cancel 됐을 때
-            return Result.failure()
-        }
-
-        syncData() // 데이터를 갱신함
-
-        Log.i("CheckSize", "${mDao.getAllShoesData().size}")
-        Log.i("CheckDrawSize", "${mDao.getAllSpecialData().size}")
-        return Result.success()
-    }
-
-    // 데이터 파싱
-    private fun parsingData() {
-        parseReleasedData()
-        parseSpecialData()
-    }
-
-    // 데이터 갱신
-    private fun syncData() {
-        checkShoesData()
-        checkSpecialData()
-    }
-
-    // FEED 파싱
-    private fun parseReleasedData() {
-        val url = "https://www.nike.com/kr/launch/?type=feed"
-        val doc = Jsoup.connect(url) // nike SNKRS창을 읽어옴
-            .userAgent("19.0.1.84.52")
-            .get()
-
-        val elementsData = doc.select("div.launch-list-item") // 여러개의 신발
-        var progress = 0.0
-
-        for (elementData in elementsData) {
-            if(isStopped) { // cancel 됐을 때
-                return
-            }
-
-            val shoesInfo = elementData.select("div.info-sect") // 신발 정보
-                .select("div.btn-box")
-                .select("span")
-                .text()
-
-            if (shoesInfo == "LEARN MORE") {
-                progress += 2.5
-                setProgressAsync(workDataOf(Contents.WORKER_PARSING_DATA_OUTPUT_KEY to progress.toInt()))
-
-                continue
-            }
-
-            val shoesSubTitle = elementData.select("div.text-box")
-                .select("p.txt-subject")
-                .text()
-            val shoesTitle = elementData.select("div.text-box")
-                .select("p.txt-description")
-                .text()
-            val innerUrl =
-                "https://www.nike.com" + elementData.select("a").attr("href") // 해당 신발의 링크창을 읽어옴
-
-            if (mDao.getAllShoesData().contains(ShoesDataModel(0, shoesSubTitle, shoesTitle))) { // 해당 데이터가 이미 존재 시
-                val category = when (shoesInfo) {
-                    "THE DRAW 진행예정", "THE DRAW 응모하기" -> ShoesDataModel.CATEGORY_DRAW
-                    "THE DRAW 응모 마감", "THE DRAW 당첨 결과 확인", "THE DRAW 종료" -> ShoesDataModel.CATEGORY_DRAW_END
-                    "COMING SOON" -> ShoesDataModel.CATEGORY_COMING_SOON
-                    else -> ShoesDataModel.CATEGORY_RELEASED
-                }
-
-                updateData(
-                    ShoesDataModel(
-                        0,
-                        shoesSubTitle,
-                        shoesTitle,
-                        null,
-                        null,
-                        innerUrl,
-                        category
-                    )
-                )
-            } else { // 존재하지 않을 시
-                val innerDoc = Jsoup.connect(innerUrl)
-                    .userAgent("19.0.1.84.52")
-                    .get()
-
-                // 신발 정보를 가져옴
-                val shoesPrice = "가격 : " + innerDoc.select("div.price") // 신발 가격
-                    .text()
-
-                val shoesImageUrl = innerDoc.select("li.uk-width-1-2") // 신발 이미지
-                    .select("img")
-                    .eq(0)
-                    .attr("src")
-
-                val insertShoesData: ShoesDataModel
-                when (shoesInfo) {
-                    "THE DRAW 진행예정", "THE DRAW 응모하기" -> {
-                        val innerElementData = innerDoc.select("span.uk-text-bold")
-
-                        var howToEvent = "" // 이벤트 참여방법
-                        for (j in 0..2) {
-                            howToEvent += innerElementData.select("p")
-                                .eq(j)
-                                .text() + "\n"
-                        }
-                        howToEvent += shoesPrice
-
-                        insertShoesData = ShoesDataModel(
-                            null,
-                            shoesSubTitle,
-                            shoesTitle,
-                            howToEvent,
-                            shoesImageUrl,
-                            innerUrl,
-                            ShoesDataModel.CATEGORY_DRAW
-                        )
-                    }
-                    "THE DRAW 응모 마감", "THE DRAW 당첨 결과 확인", "THE DRAW 종료" -> {
-                        insertShoesData = ShoesDataModel(
-                            null,
-                            shoesSubTitle,
-                            shoesTitle,
-                            "DRAW가 종료 되었습니다.",
-                            shoesImageUrl,
-                            innerUrl,
-                            ShoesDataModel.CATEGORY_DRAW_END
-                        )
-                    }
-                    "COMING SOON" -> {
-                        val launchDate = "${innerDoc.select("div.txt-date").text()}\n${shoesPrice}"
-
-                        insertShoesData = ShoesDataModel(
-                            null,
-                            shoesSubTitle,
-                            shoesTitle,
-                            launchDate,
-                            shoesImageUrl,
-                            innerUrl,
-                            ShoesDataModel.CATEGORY_COMING_SOON
-                        )
-                    }
-                    else -> {
-                        insertShoesData = ShoesDataModel(
-                            null,
-                            shoesSubTitle,
-                            shoesTitle,
-                            shoesPrice,
-                            shoesImageUrl,
-                            innerUrl,
-                            ShoesDataModel.CATEGORY_RELEASED
-                        )
-                    }
-                }
-
-                insertData(insertShoesData)
-            }
-
-
-            progress += 2.5
-
-            setProgressAsync(workDataOf(Contents.WORKER_PARSING_DATA_OUTPUT_KEY to progress.toInt()))
-            allShoesList.add(ShoesDataModel(0, shoesSubTitle, shoesTitle, null, null, innerUrl))
-        }
-    }
-
-    // UPCOMING 파싱
-    private fun parseSpecialData() {
-        val url = "https://www.nike.com/kr/launch/?type=upcoming&activeDate=date-filter:AFTER"
-        val doc = Jsoup.connect(url) // nike SNKRS창을 읽어옴
-            .userAgent("19.0.1.84.52")
-            .get()
-        val elementsData = doc.select("div.launch-list-item")
-
-        for (elementData in elementsData) {
-            if(isStopped) { // cancel 됐을 때
-                return
-            }
-
-            val category = elementData.select("div.info-sect")
-                .select("div.btn-box")
-                .select("span.btn-link")
-                .text()
-            val specialUrl = "https://www.nike.com" + elementData.select("a").attr("href")
-
-            if (checkCategory(category) || mDao.getAllSpecialData().contains(SpecialDataModel(0, specialUrl))) { // 이미 데이터 존재하지 않고 special이 아니면 continue
-                continue
-            }
-
-            val month = elementData.select("div.img-sect")
-                .select("div.date")
-                .select("span.month")
-                .text()
-            val day = elementData.select("div.img-sect")
-                .select("div.date")
-                .select("span.day")
-                .text()
-            val whenStartEvent = elementData.select("div.info-sect")
-                .select("div.text-box")
-                .select("p.txt-subject")
-                .text()
-            val order = "${month.split("월")[0]}${day}".toInt()
-
-            val specialData = SpecialDataModel(null, specialUrl, month, day, whenStartEvent, order)
-            insertSpecialData(specialData)
-        }
-    }
-
-    private fun checkCategory(category: String): Boolean {
-        return when (category) {
-            "THE DRAW 진행예정", "THE DRAW 응모하기", "COMING SOON" -> {
-                false
-            }
-            else -> {
-                true
-            }
-        }
-    }
-
-    // 갱신 설정
-    // ShoesData 리스트를 갱신 함
-    private fun checkShoesData() {
-
-        if (allShoesList.size < mDao.getAllShoesData().size) {
-            for (shoesData in mDao.getAllShoesData()) {
-
-                if (!allShoesList.contains(shoesData)) {
-                    mDao.deleteShoesData(shoesData.shoesTitle, shoesData.shoesSubTitle)
-                }
-            }
-        }
-    }
-
-    // SpecialData 리스트를 갱신 함
-    private fun checkSpecialData() {
-        for (specialData in mDao.getAllSpecialData()) {
-
-            if (!allShoesList.contains(ShoesDataModel(0, "", "", null, null, specialData.specialUrl))) {
-                deleteSpecialData(specialData)
-            }
-        }
-    }
-    // 갱신 끝
-
-    // 데이터베이스 설정
-    private fun insertData(shoesData: ShoesDataModel) {
-        mDao.insertShoesData(shoesData)
-    }
-
-    private fun updateData(newShoesData: ShoesDataModel) {
-        val index = mDao.getAllShoesData()
-            .indexOf(ShoesDataModel(0, newShoesData.shoesSubTitle, newShoesData.shoesTitle))
-        val ordinaryData = mDao.getAllShoesData()[index]
-
-        if (newShoesData.shoesCategory != ordinaryData.shoesCategory) { // CATEGORY -> RELEASED
-            if (ordinaryData.shoesCategory == ShoesDataModel.CATEGORY_COMING_SOON) {
-                val newShoesPrice = ordinaryData.shoesPrice?.split("\n")?.get(1) // 신발 가격
-
-                mDao.updateShoesCategory(
-                    newShoesPrice,
-                    newShoesData.shoesCategory,
-                    newShoesData.shoesTitle,
-                    newShoesData.shoesSubTitle
-                )
-
-                deleteSpecialData(SpecialDataModel(0, ordinaryData.shoesUrl!!))
-            } else if (ordinaryData.shoesCategory == ShoesDataModel.CATEGORY_DRAW) { // DRAW -> DRAW END
-                val newShoesPrice = "DRAW가 종료 되었습니다."
-
-                mDao.updateShoesCategory(
-                    newShoesPrice,
-                    newShoesData.shoesCategory,
-                    newShoesData.shoesTitle,
-                    newShoesData.shoesSubTitle
-                )
-                mDao.deleteSpecialData(newShoesData.shoesUrl!!)
-            }
-        }
-
-        if (newShoesData.shoesUrl != ordinaryData.shoesUrl) { // URL이 바뀌었을 시
-            mDao.updateShoesUrl(
-                newShoesData.shoesUrl,
-                newShoesData.shoesTitle,
-                newShoesData.shoesSubTitle
-            )
-
-            if(mDao.getAllSpecialData().contains(SpecialDataModel(0, ordinaryData.shoesUrl!!))) { // Special이 존재 할 시
-                mDao.updateSpecialDataUrl(newShoesData.shoesUrl!!, ordinaryData.shoesUrl)
-            }
-        }
-    }
-
-    private fun clearData() {
-        mDao.clearShoesData()
-    }
-
-    private fun insertSpecialData(specialData: SpecialDataModel) {
-        mDao.insertSpecialData(specialData)
-    }
-
-    private fun deleteSpecialData(delete: SpecialDataModel) {
-        mDao.deleteSpecialData(delete.specialUrl)
-    }
-    // 데이터베이스 설정 끝
-}
\ No newline at end of file
Index: app/src/main/java/com/nikealarm/nikedrawalarm/other/Contents.kt
===================================================================
--- app/src/main/java/com/nikealarm/nikedrawalarm/other/Contents.kt	(revision b3f4dce6bbc1f64b2f120ac4dc054823810b53e9)
+++ app/src/main/java/com/nikealarm/nikedrawalarm/other/Contents.kt	(revision b3f4dce6bbc1f64b2f120ac4dc054823810b53e9)
@@ -1,25 +0,0 @@
-package com.nikealarm.nikedrawalarm.other
-
-object Contents {
-    const val INTENT_ACTION_SYNC_ALARM = "INTENT_ACTION_SYNC_ALARM"
-    const val INTENT_ACTION_PRODUCT_ALARM = "INTENT_ACTION_PRODUCT_ALARM"
-    const val INTENT_ACTION_GOTO_WEBSITE = "INTENT_ACTION_GOTO_WEBSITE"
-    const val INTENT_ACTION_GOTO_DRAWLIST = "INTENT_ACTION_GOTO_DRAWLIST"
-    const val INTENT_KEY_POSITION = "INTENT_KEY_POSITION"
-
-    const val CHANNEL_ID = "channelId"
-    const val DRAW_URL = "drawUrl"
-
-    const val PREFERENCE_NAME_TIME = "PREFERENCE_NAME_TIME"
-    const val PREFERENCE_NAME_ALLOW_ALARM = "PREFERENCE_NAME_ALLOW_ALARM"
-
-    const val SYNC_ALARM_CODE = 2000
-    const val SYNC_ALARM_KEY = "SYNC_ALARM_KEY"
-
-    const val WORKER_INPUT_DATA_KEY = "WORKER_INPUT_DATA_KEY"
-    const val WORKER_PARSING_DATA = "WORKER_PARSING_DATA"
-    const val WORKER_PARSING_DATA_OUTPUT_KEY = "WORKER_PARSING_DATA_OUTPUT_KEY"
-    const val WORKER_GET_IMAGE = "WORKER_GET_IMAGE"
-    const val WORKER_GET_IMAGE_INPUT_KEY = "WORKER_GET_IMAGE_INPUT_KEY"
-    const val WORKER_GET_IMAGE_OUTPUT_KEY = "WORKER_GET_IMAGE_OUTPUT_KEY"
-}
\ No newline at end of file
Index: app/src/main/java/com/nikealarm/nikedrawalarm/database/MyDataBase.kt
===================================================================
--- app/src/main/java/com/nikealarm/nikedrawalarm/database/MyDataBase.kt	(revision b3f4dce6bbc1f64b2f120ac4dc054823810b53e9)
+++ app/src/main/java/com/nikealarm/nikedrawalarm/database/MyDataBase.kt	(revision b3f4dce6bbc1f64b2f120ac4dc054823810b53e9)
@@ -1,37 +0,0 @@
-package com.nikealarm.nikedrawalarm.database
-
-import android.content.Context
-import androidx.room.Database
-import androidx.room.Room
-import androidx.room.RoomDatabase
-import androidx.room.TypeConverters
-
-@Database(entities = [SpecialDataModel::class, ShoesDataModel::class], version = 5)
-@TypeConverters(Converter::class)
-abstract class MyDataBase : RoomDatabase() {
-    abstract fun getDao(): Dao
-
-    companion object {
-        private var instance: MyDataBase? = null
-//        val MIGRATION_1_2 = object : Migration(1, 2) {
-//            override fun migrate(database: SupportSQLiteDatabase) {
-//                database.execSQL("CREATE TABLE SpecialDataModel (SpecialShoesId INTEGER, SpecialShoesSubTitle TEXT, SpecialShoesTitle TEXT, HowToEvent TEXT, SpecialShoesUrl TEXT, SpecialShoesImageUrl TEXT, SpecialShoesMonth TEXT, SpecialShoesDay TEXT, SpecialShoesWhenEvent TEXT) ")
-//            }
-//        }
-
-        fun getDatabase(context: Context): MyDataBase? {
-            if(instance == null) {
-                synchronized(MyDataBase::class.java) {
-                    instance = Room.databaseBuilder(
-                        context,
-                        MyDataBase::class.java,
-                        "database")
-                        .fallbackToDestructiveMigration()
-                        .build()
-                }
-            }
-
-            return instance
-        }
-    }
-}
\ No newline at end of file
Index: app/src/main/java/com/nikealarm/nikedrawalarm/component/ProductNotifyWorker.kt
===================================================================
--- app/src/main/java/com/nikealarm/nikedrawalarm/component/ProductNotifyWorker.kt	(revision b3f4dce6bbc1f64b2f120ac4dc054823810b53e9)
+++ app/src/main/java/com/nikealarm/nikedrawalarm/component/ProductNotifyWorker.kt	(revision b3f4dce6bbc1f64b2f120ac4dc054823810b53e9)
@@ -1,119 +0,0 @@
-package com.nikealarm.nikedrawalarm.component
-
-import android.app.NotificationChannel
-import android.app.NotificationManager
-import android.app.PendingIntent
-import android.content.Context
-import android.content.Intent
-import android.net.Uri
-import android.os.Build
-import android.util.Log
-import androidx.core.app.NotificationCompat
-import androidx.core.app.NotificationManagerCompat
-import androidx.work.Worker
-import androidx.work.WorkerParameters
-import com.nikealarm.nikedrawalarm.R
-import com.nikealarm.nikedrawalarm.database.Dao
-import com.nikealarm.nikedrawalarm.database.MyDataBase
-import com.nikealarm.nikedrawalarm.database.SpecialShoesDataModel
-import com.nikealarm.nikedrawalarm.other.Contents
-import com.nikealarm.nikedrawalarm.ui.MainActivity
-import com.squareup.picasso.Picasso
-
-class ProductNotifyWorker(context: Context, workerParams: WorkerParameters) : Worker(
-    context,
-    workerParams
-) {
-    private lateinit var mDao: Dao
-
-    override fun doWork(): Result {
-        mDao = MyDataBase.getDatabase(applicationContext)!!.getDao()
-        val position = inputData.getInt(Contents.WORKER_INPUT_DATA_KEY, -1)
-
-        Log.i("Check5", "position: ${position}")
-        if (position != -1) {
-            val drawData = mDao.getAllSpecialShoesData()[position]
-
-            createNotification(drawData, applicationContext)
-
-            // 알림 후 해당 상품을 db에서 지움
-            deleteShoesData(drawData)
-        }
-
-        return Result.success()
-    }
-
-    private fun createNotification(specialInfo: SpecialShoesDataModel, context: Context) {
-        val vibrate = LongArray(4).apply {
-            set(0, 0)
-            set(1, 100)
-            set(2, 200)
-            set(3, 300)
-        }
-
-        val goEventPendingIntent = PendingIntent.getActivity(
-            context,
-            5000,
-            Intent(context, MainActivity::class.java).also {
-                it.action = Contents.INTENT_ACTION_GOTO_WEBSITE
-                it.putExtra(Contents.DRAW_URL, specialInfo.ShoesUrl)
-            },
-            PendingIntent.FLAG_ONE_SHOT
-        )
-        val bitmap = Picasso.get().load(Uri.parse(specialInfo.ShoesImageUrl)).get()
-        val notificationBuilder = NotificationCompat.Builder(context, "Default")
-            .setSmallIcon(R.mipmap.ic_launcher)
-            .setContentTitle("${specialInfo.ShoesSubTitle} - ${specialInfo.ShoesTitle}")
-            .setVibrate(vibrate)
-            .setLargeIcon(bitmap)
-            .setStyle(NotificationCompat.BigTextStyle())
-            .setStyle(
-                NotificationCompat.BigPictureStyle()
-                    .bigPicture(bitmap)
-                    .bigLargeIcon(null)
-            )
-            .setContentText("해당 상품이 출시되었습니다.")
-            .addAction(0, "바로가기", goEventPendingIntent)
-
-        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.O) {
-            val channel = NotificationChannel(
-                "Default",
-                specialInfo.ShoesTitle,
-                NotificationManager.IMPORTANCE_DEFAULT
-            )
-            val notificationManager =
-                context.getSystemService(Context.NOTIFICATION_SERVICE) as NotificationManager
-
-            notificationManager.createNotificationChannel(channel)
-        }
-
-
-        with(NotificationManagerCompat.from(context)) {
-            notify(100, notificationBuilder.build())
-        }
-    }
-
-    // 데이터를 지움
-    private fun deleteShoesData(data: SpecialShoesDataModel) {
-        val timeSharedPreference = applicationContext.getSharedPreferences(
-            Contents.PREFERENCE_NAME_TIME,
-            Context.MODE_PRIVATE
-        )
-        val allowAlarmPreference = applicationContext.getSharedPreferences(
-            Contents.PREFERENCE_NAME_ALLOW_ALARM,
-            Context.MODE_PRIVATE
-        )
-
-        with(timeSharedPreference.edit()) {
-            remove("${data.ShoesTitle}-${data.ShoesSubTitle}")
-            commit()
-        }
-
-        mDao.deleteSpecialData(data.ShoesUrl!!)
-        with(allowAlarmPreference.edit()) {
-            remove("${data.ShoesTitle}-${data.ShoesSubTitle}")
-            commit()
-        }
-
-    }
-}
\ No newline at end of file
Index: app/src/main/java/com/nikealarm/nikedrawalarm/ui/fragment/SettingFragment.kt
===================================================================
--- app/src/main/java/com/nikealarm/nikedrawalarm/ui/fragment/SettingFragment.kt	(revision b3f4dce6bbc1f64b2f120ac4dc054823810b53e9)
+++ app/src/main/java/com/nikealarm/nikedrawalarm/ui/fragment/SettingFragment.kt	(revision b3f4dce6bbc1f64b2f120ac4dc054823810b53e9)
@@ -1,46 +0,0 @@
-package com.nikealarm.nikedrawalarm.ui.fragment
-
-import android.os.Bundle
-import android.view.LayoutInflater
-import android.view.MenuItem
-import android.view.View
-import android.view.ViewGroup
-import androidx.appcompat.widget.Toolbar
-import androidx.fragment.app.Fragment
-import androidx.navigation.fragment.findNavController
-import com.nikealarm.nikedrawalarm.R
-import com.nikealarm.nikedrawalarm.ui.MainActivity
-
-class SettingFragment : Fragment() {
-
-    override fun onCreateView(
-        inflater: LayoutInflater,
-        container: ViewGroup?,
-        savedInstanceState: Bundle?
-    ): View? {
-
-        setHasOptionsMenu(true)
-        return inflater.inflate(R.layout.fragment_setting, container, false)
-    }
-
-    // 시작
-    override fun onViewCreated(view: View, savedInstanceState: Bundle?) {
-        super.onViewCreated(view, savedInstanceState)
-
-        // id 설정
-        val toolbar = view.findViewById<Toolbar>(R.id.settingFrag_toolbar).apply {
-            (activity as MainActivity).setSupportActionBar(this)
-            (activity as MainActivity).supportActionBar?.setDisplayHomeAsUpEnabled(true)
-        }
-    }
-
-    override fun onOptionsItemSelected(item: MenuItem): Boolean {
-        return when(item.itemId) {
-            android.R.id.home -> {
-                findNavController().navigateUp()
-                true
-            }
-            else -> false
-        }
-    }
-}
\ No newline at end of file
Index: app/src/main/java/com/nikealarm/nikedrawalarm/ui/fragment/ShoesListFragment.kt
===================================================================
--- app/src/main/java/com/nikealarm/nikedrawalarm/ui/fragment/ShoesListFragment.kt	(revision b3f4dce6bbc1f64b2f120ac4dc054823810b53e9)
+++ app/src/main/java/com/nikealarm/nikedrawalarm/ui/fragment/ShoesListFragment.kt	(revision b3f4dce6bbc1f64b2f120ac4dc054823810b53e9)
@@ -1,268 +0,0 @@
-package com.nikealarm.nikedrawalarm.ui.fragment
-
-import android.os.Bundle
-import android.view.*
-import android.widget.ImageView
-import android.widget.Toast
-import androidx.activity.OnBackPressedCallback
-import androidx.appcompat.app.ActionBarDrawerToggle
-import androidx.appcompat.widget.Toolbar
-import androidx.core.view.GravityCompat
-import androidx.core.view.doOnPreDraw
-import androidx.drawerlayout.widget.DrawerLayout
-import androidx.fragment.app.Fragment
-import androidx.lifecycle.Observer
-import androidx.lifecycle.ViewModelProvider
-import androidx.navigation.fragment.FragmentNavigatorExtras
-import androidx.navigation.fragment.findNavController
-import androidx.recyclerview.widget.LinearLayoutManager
-import androidx.recyclerview.widget.RecyclerView
-import com.google.android.material.navigation.NavigationView
-import com.nikealarm.nikedrawalarm.adapter.ShoesListAdapter
-import com.nikealarm.nikedrawalarm.R
-import com.nikealarm.nikedrawalarm.database.ShoesDataModel
-import com.nikealarm.nikedrawalarm.ui.MainActivity
-import com.nikealarm.nikedrawalarm.viewmodel.MyViewModel
-import kotlinx.android.synthetic.main.fragment_shoes_list.*
-import kotlinx.coroutines.CoroutineScope
-import kotlinx.coroutines.Dispatchers
-import kotlinx.coroutines.delay
-import kotlinx.coroutines.launch
-
-class ShoesListFragment : Fragment(), ShoesListAdapter.ItemClickListener,
-    NavigationView.OnNavigationItemSelectedListener, ShoesListAdapter.ImageClickListener {
-    private lateinit var drawer: DrawerLayout
-    private lateinit var backToast: Toast
-
-    private lateinit var mViewModel: MyViewModel
-    private val FINISH_INTERVAL_TIME = 2000L
-    private var backPressedTime = 0L
-
-    override fun onCreateView(
-        inflater: LayoutInflater, container: ViewGroup?,
-        savedInstanceState: Bundle?
-    ): View? {
-        // Inflate the layout for this fragment
-
-        activity?.onBackPressedDispatcher?.addCallback(backPressedCallback)
-
-        return inflater.inflate(R.layout.fragment_shoes_list, container, false)
-    }
-
-    // 시작
-    override fun onViewCreated(view: View, savedInstanceState: Bundle?) {
-        super.onViewCreated(view, savedInstanceState)
-
-        // 툴바 설정
-        val mToolbar = view.findViewById<Toolbar>(R.id.drawListFrag_toolbar).apply {
-            (activity as MainActivity).setSupportActionBar(this)
-        }
-
-        // 인스턴스 설정
-        mViewModel = ViewModelProvider(requireActivity())[MyViewModel::class.java]
-
-        val mAdapter = ShoesListAdapter(
-            requireContext(),
-            requireActivity().supportFragmentManager
-        ).apply {
-            setOnItemClickListener(this@ShoesListFragment)
-            setOnImageClickListener(this@ShoesListFragment)
-        }
-
-        // 옵저버 설정
-        mViewModel.getShoesCategory().observe(viewLifecycleOwner, Observer {
-            mToolbar.title = it
-
-            if (drawListFrag_scrollUp_Button.isEnabled) {
-                disappearButton()
-            }
-//            disappearButton()
-        })
-        mViewModel.getShoesData().observe(viewLifecycleOwner, Observer {
-            mAdapter.submitList(it)
-            if (it.size == 0) {
-                appearText()
-            } else {
-                if (drawListFrag_noItem_text.isEnabled) {
-                    disappearText()
-                }
-            }
-        })
-
-        // id 설정
-        val listView = view.findViewById<RecyclerView>(R.id.drawListFrag_listView).apply {
-            setHasFixedSize(true)
-            layoutManager = LinearLayoutManager(context)
-            adapter = mAdapter
-
-            addOnScrollListener(object : RecyclerView.OnScrollListener() {
-                override fun onScrollStateChanged(recyclerView: RecyclerView, newState: Int) {
-                    super.onScrollStateChanged(recyclerView, newState)
-
-                    if (recyclerView.computeVerticalScrollOffset() == 0) {
-                        disappearButton()
-                    } else {
-                        appearButton()
-                    }
-                }
-            })
-        }
-        with(drawListFrag_scrollUp_Button) {
-            isEnabled = false
-            setOnClickListener {
-                listView.smoothScrollToPosition(0)
-            }
-        }
-        val navView = view.findViewById<NavigationView>(R.id.drawListFrag_navView).apply {
-            setCheckedItem(R.id.mainMenu_released)
-            setNavigationItemSelectedListener(this@ShoesListFragment)
-        }
-        drawer = view.findViewById(R.id.drawListFrag_drawer)
-
-        // navigation 설정
-        val toggle = ActionBarDrawerToggle(
-            requireActivity(),
-            drawer,
-            mToolbar,
-            R.string.open_drawer,
-            R.string.close_drawer
-        )
-        drawer.addDrawerListener(toggle)
-        toggle.syncState()
-
-        postponeEnterTransition()
-        listView.doOnPreDraw {
-            startPostponedEnterTransition()
-        }
-    }
-
-    override fun onClickItem(newUrl: String?) {
-        mViewModel.setUrl(newUrl ?: "https://www.nike.com/kr/launch/?type=feed")
-        findNavController().navigate(R.id.action_drawListFragment_to_mainWebFragment)
-    }
-
-    override fun onClickImage(newUrl: String, shoesImageUrl: String, imageView: ImageView) {
-        mViewModel.setUrl(newUrl)
-        mViewModel.shoesImageUrl.value = shoesImageUrl
-
-        val extras = FragmentNavigatorExtras(
-            imageView to newUrl
-        )
-        findNavController().navigate(
-            R.id.action_drawListFragment_to_imageListFragment,
-            null,
-            null,
-            extras
-        )
-    }
-
-    override fun onNavigationItemSelected(menuItem: MenuItem): Boolean {
-        drawer.closeDrawer(GravityCompat.START)
-
-        return when (menuItem.itemId) {
-            R.id.mainMenu_draw -> {
-                setToolbarTitle(ShoesDataModel.CATEGORY_DRAW)
-                true
-            }
-            R.id.mainMenu_comingSoon -> {
-                setToolbarTitle(ShoesDataModel.CATEGORY_COMING_SOON)
-                true
-            }
-            R.id.mainMenu_released -> {
-                setToolbarTitle(ShoesDataModel.CATEGORY_RELEASED)
-                true
-            }
-            R.id.mainMenu_upcoming -> {
-                CoroutineScope(Dispatchers.IO).launch {
-                    delay(230)
-                    findNavController().navigate(R.id.action_drawListFragment_to_upcomingListFragment)
-                }
-                true
-            }
-            R.id.mainMenu_setting -> {
-                CoroutineScope(Dispatchers.IO).launch {
-                    delay(230)
-                    findNavController().navigate(R.id.action_drawListFragment_to_settingFragment)
-                }
-
-                true
-            }
-            else -> false
-        }
-    }
-
-    override fun onResume() {
-        super.onResume()
-        backPressedCallback.isEnabled = true
-    }
-
-    override fun onDestroyView() {
-        super.onDestroyView()
-        backPressedCallback.isEnabled = false
-    }
-
-    private fun setToolbarTitle(shoesCategory: String) {
-        mViewModel.setShoesCategory(shoesCategory)
-    }
-
-    private val backPressedCallback = object : OnBackPressedCallback(true) {
-
-        override fun handleOnBackPressed() {
-            if (drawer.isDrawerOpen(GravityCompat.START)) {
-                drawer.closeDrawer(GravityCompat.START)
-            } else {
-                val tempTime = System.currentTimeMillis()
-                val intervalTime = tempTime - backPressedTime
-
-                if(0 <= intervalTime && FINISH_INTERVAL_TIME >= intervalTime) {
-                    requireActivity().finish()
-                    backToast.cancel()
-                } else {
-                    backPressedTime = tempTime
-                    backToast = Toast.makeText(requireContext(), "뒤로 가기 버튼을 한 번 더 누르면 종료됩니다.", Toast.LENGTH_SHORT).apply {
-                        show()
-                    }
-                }
-            }
-        }
-    }
-
-    // 애니메이션 설정
-    private fun appearText() {
-        with(drawListFrag_noItem_text) {
-            isEnabled = true
-
-            animate().setDuration(350)
-                .alpha(1f)
-                .withLayer()
-        }
-    }
-
-    private fun disappearText() {
-        with(drawListFrag_noItem_text) {
-            isEnabled = false
-
-            animate().setDuration(100)
-                .alpha(0f)
-                .withLayer()
-        }
-    }
-
-    private fun appearButton() {
-        with(drawListFrag_scrollUp_Button) {
-            isEnabled = true
-            animate().setDuration(100)
-                .alpha(1f)
-                .withLayer()
-        }
-    }
-
-    private fun disappearButton() {
-        with(drawListFrag_scrollUp_Button) {
-            isEnabled = false
-            animate().setDuration(100)
-                .alpha(0f)
-                .withLayer()
-        }
-    }
-}
\ No newline at end of file
