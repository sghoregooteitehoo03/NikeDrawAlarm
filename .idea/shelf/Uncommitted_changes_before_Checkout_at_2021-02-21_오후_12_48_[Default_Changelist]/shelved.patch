Index: app/src/main/java/com/nikealarm/nikedrawalarm/component/worker/ParsingWorker.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.nikealarm.nikedrawalarm.component.worker\r\n\r\nimport android.content.Context\r\nimport android.util.Log\r\nimport androidx.hilt.work.HiltWorker\r\nimport androidx.work.Worker\r\nimport androidx.work.WorkerParameters\r\nimport androidx.work.workDataOf\r\nimport com.nikealarm.nikedrawalarm.database.Dao\r\nimport com.nikealarm.nikedrawalarm.database.SpecialDataModel\r\nimport com.nikealarm.nikedrawalarm.database.ShoesDataModel\r\nimport com.nikealarm.nikedrawalarm.other.Contents\r\nimport dagger.assisted.Assisted\r\nimport dagger.assisted.AssistedInject\r\nimport org.jsoup.Jsoup\r\n\r\n@HiltWorker\r\nclass ParsingWorker @AssistedInject constructor(\r\n    @Assisted context: Context,\r\n    @Assisted workerParams: WorkerParameters,\r\n    private val mDao: Dao\r\n) : Worker(\r\n    context,\r\n    workerParams\r\n) {\r\n\r\n    private val allShoesList = mutableListOf<ShoesDataModel>()\r\n\r\n    override fun doWork(): Result {\r\n        parsingData() // 데이터를 파싱함\r\n        if (isStopped) { // cancel 됐을 때\r\n            return Result.failure()\r\n        }\r\n\r\n        syncData() // 데이터를 갱신함\r\n\r\n        Log.i(\"CheckSize\", \"${mDao.getAllShoesData().size}\")\r\n        Log.i(\"CheckDrawSize\", \"${mDao.getAllSpecialData().size}\")\r\n        return Result.success()\r\n    }\r\n\r\n    // 데이터 파싱\r\n    private fun parsingData() {\r\n        parseReleasedData()\r\n        parseSpecialData()\r\n    }\r\n\r\n    // 데이터 갱신\r\n    private fun syncData() {\r\n        checkShoesData()\r\n        checkSpecialData()\r\n    }\r\n\r\n    // FEED 파싱\r\n    private fun parseReleasedData() {\r\n        val url = \"https://www.nike.com/kr/launch/\"\r\n        val doc = Jsoup.connect(url) // nike SNKRS창을 읽어옴\r\n            .userAgent(\"19.0.1.84.52\")\r\n            .get()\r\n\r\n        val elementsData = doc.select(\"li.launch-list-item\") // 여러개의 신발\r\n        var progress = 0.0\r\n\r\n        for (elementData in elementsData) {\r\n            if (isStopped) { // cancel 됐을 때\r\n                return\r\n            }\r\n\r\n            val shoesInfo = elementData.select(\"div.info-sect\") // 신발 정보\r\n                .select(\"div.btn-box\")\r\n                .select(\"span\")\r\n                .text()\r\n\r\n            if (shoesInfo == \"LEARN MORE\") {\r\n                progress += 2.5\r\n                setProgressAsync(workDataOf(Contents.WORKER_PARSING_DATA_OUTPUT_KEY to progress.toInt()))\r\n\r\n                continue\r\n            }\r\n\r\n            val shoesSubTitle = elementData.select(\"div.text-box\")\r\n                .select(\"p.txt-subject\")\r\n                .text()\r\n            val shoesTitle = elementData.select(\"div.text-box\")\r\n                .select(\"p.txt-description\")\r\n                .text()\r\n            val innerUrl =\r\n                \"https://www.nike.com\" + elementData.select(\"a\").attr(\"href\") // 해당 신발의 링크창을 읽어옴\r\n\r\n            if (mDao.existsShoesData(shoesTitle, shoesSubTitle, innerUrl)) { // 해당 데이터가 이미 존재 시\r\n                val category = when (shoesInfo) {\r\n                    \"THE DRAW 진행예정\", \"THE DRAW 응모하기\" -> ShoesDataModel.CATEGORY_DRAW\r\n                    \"THE DRAW 응모 마감\", \"THE DRAW 당첨 결과 확인\", \"THE DRAW 종료\" -> ShoesDataModel.CATEGORY_DRAW_END\r\n                    \"COMING SOON\" -> ShoesDataModel.CATEGORY_COMING_SOON\r\n                    else -> ShoesDataModel.CATEGORY_RELEASED\r\n                }\r\n\r\n                updateData(\r\n                    ShoesDataModel(\r\n                        0,\r\n                        shoesSubTitle,\r\n                        shoesTitle,\r\n                        shoesInfo,\r\n                        null,\r\n                        innerUrl,\r\n                        category\r\n                    )\r\n                )\r\n            } else { // 존재하지 않을 시\r\n                val innerDoc = Jsoup.connect(innerUrl)\r\n                    .userAgent(\"19.0.1.84.52\")\r\n                    .get()\r\n\r\n                // 신발 정보를 가져옴\r\n                val shoesPrice = \"가격 : \" + innerDoc.select(\"div.price\") // 신발 가격\r\n                    .text()\r\n\r\n                val shoesImageUrl = innerDoc.select(\"li.uk-width-1-2\") // 신발 이미지\r\n                    .select(\"img\")\r\n                    .eq(0)\r\n                    .attr(\"src\")\r\n\r\n                val insertShoesData: ShoesDataModel\r\n                when (shoesInfo) {\r\n                    \"THE DRAW 진행예정\", \"THE DRAW 응모하기\" -> { // DRAW\r\n                        val innerElementData = innerDoc.select(\"span.uk-text-bold\")\r\n\r\n                        var howToEvent = \"\" // 이벤트 참여방법\r\n                        for (j in 0..2) {\r\n                            howToEvent += innerElementData.select(\"p\")\r\n                                .eq(j)\r\n                                .text() + \"\\n\"\r\n                        }\r\n                        howToEvent += shoesPrice\r\n\r\n                        insertShoesData = ShoesDataModel(\r\n                            null,\r\n                            shoesSubTitle,\r\n                            shoesTitle,\r\n                            howToEvent,\r\n                            shoesImageUrl,\r\n                            innerUrl,\r\n                            ShoesDataModel.CATEGORY_DRAW\r\n                        )\r\n                    }\r\n                    \"THE DRAW 응모 마감\", \"THE DRAW 당첨 결과 확인\", \"THE DRAW 종료\" -> { // DRAW END\r\n                        insertShoesData = ShoesDataModel(\r\n                            null,\r\n                            shoesSubTitle,\r\n                            shoesTitle,\r\n                            \"DRAW가 종료 되었습니다.\",\r\n                            shoesImageUrl,\r\n                            innerUrl,\r\n                            ShoesDataModel.CATEGORY_DRAW_END\r\n                        )\r\n                    }\r\n                    \"COMING SOON\" -> { // COMING SOON\r\n                        val launchDate = \"${innerDoc.select(\"div.txt-date\").text()}\\n${shoesPrice}\"\r\n\r\n                        insertShoesData = ShoesDataModel(\r\n                            null,\r\n                            shoesSubTitle,\r\n                            shoesTitle,\r\n                            launchDate,\r\n                            shoesImageUrl,\r\n                            innerUrl,\r\n                            ShoesDataModel.CATEGORY_COMING_SOON\r\n                        )\r\n                    }\r\n                    else -> { // RELEASED\r\n                        val stock: String = if (shoesInfo == ShoesDataModel.SHOES_SOLD_OUT) {\r\n                            shoesInfo\r\n                        } else {\r\n                            shoesPrice\r\n                        }\r\n                        insertShoesData = ShoesDataModel(\r\n                            null,\r\n                            shoesSubTitle,\r\n                            shoesTitle,\r\n                            stock,\r\n                            shoesImageUrl,\r\n                            innerUrl,\r\n                            ShoesDataModel.CATEGORY_RELEASED\r\n                        )\r\n                    }\r\n                }\r\n\r\n                insertData(insertShoesData)\r\n            }\r\n\r\n\r\n            progress += 2.5\r\n\r\n            setProgressAsync(workDataOf(Contents.WORKER_PARSING_DATA_OUTPUT_KEY to progress.toInt()))\r\n            allShoesList.add(ShoesDataModel(0, shoesSubTitle, shoesTitle, null, null, innerUrl))\r\n        }\r\n    }\r\n\r\n    // UPCOMING 파싱\r\n    private fun parseSpecialData() {\r\n        val url = \"https://www.nike.com/kr/launch/?type=upcoming&activeDate=date-filter:AFTER\"\r\n        val doc = Jsoup.connect(url) // nike SNKRS창을 읽어옴\r\n            .userAgent(\"19.0.1.84.52\")\r\n            .get()\r\n        val elementsData = doc.select(\"li.launch-list-item\")\r\n\r\n        for (elementData in elementsData) {\r\n            if (isStopped) { // cancel 됐을 때\r\n                return\r\n            }\r\n\r\n            val category = elementData.select(\"div.info-sect\")\r\n                .select(\"div.btn-box\")\r\n                .select(\"span.btn-link\")\r\n                .text()\r\n            val specialUrl = \"https://www.nike.com\" + elementData.select(\"a\").attr(\"href\")\r\n\r\n            if (checkCategory(category) || mDao.existsSpecialData(specialUrl)) { // 이미 데이터 존재하지 않고 special이 아니면 continue\r\n                continue\r\n            }\r\n\r\n            val date = elementData.attr(\"data-active-date\")\r\n                .split(\" \")[0]\r\n            val year = date.split(\"-\")[0]\r\n            val month = elementData.select(\"div.img-sect\")\r\n                .select(\"div.date\")\r\n                .select(\"span.month\")\r\n                .text()\r\n            val day = elementData.select(\"div.img-sect\")\r\n                .select(\"div.date\")\r\n                .select(\"span.day\")\r\n                .text()\r\n            val whenStartEvent = elementData.select(\"div.info-sect\")\r\n                .select(\"div.text-box\")\r\n                .select(\"p.txt-subject\")\r\n                .text()\r\n            val order = \"$year${month.split(\"월\")[0]}${day}\".toInt()\r\n\r\n            val specialData =\r\n                SpecialDataModel(null, specialUrl, year, month, day, whenStartEvent, order)\r\n            insertSpecialData(specialData)\r\n        }\r\n    }\r\n\r\n    private fun checkCategory(category: String): Boolean {\r\n        return when (category) {\r\n            \"THE DRAW 진행예정\", \"COMING SOON\" -> {\r\n                false\r\n            }\r\n            else -> {\r\n                true\r\n            }\r\n        }\r\n    }\r\n\r\n    // 갱신 설정\r\n    // ShoesData 리스트를 갱신 함\r\n    private fun checkShoesData() {\r\n\r\n        if (allShoesList.size < mDao.getAllShoesData().size) {\r\n            for (shoesData in mDao.getAllShoesData()) {\r\n\r\n                if (!allShoesList.contains(shoesData)) {\r\n                    mDao.deleteShoesData(shoesData.shoesTitle, shoesData.shoesSubTitle)\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    // SpecialData 리스트를 갱신 함\r\n    private fun checkSpecialData() {\r\n        for (specialData in mDao.getAllSpecialData()) {\r\n\r\n            if (!allShoesList.contains(\r\n                    ShoesDataModel(\r\n                        0,\r\n                        \"\",\r\n                        \"\",\r\n                        null,\r\n                        null,\r\n                        specialData.specialUrl\r\n                    )\r\n                )\r\n            ) {\r\n                deleteSpecialData(specialData)\r\n            }\r\n        }\r\n    }\r\n    // 갱신 끝\r\n\r\n    // 데이터베이스 설정\r\n    private fun insertData(shoesData: ShoesDataModel) {\r\n        mDao.insertShoesData(shoesData)\r\n    }\r\n\r\n    private fun updateData(newShoesData: ShoesDataModel) {\r\n        val index = mDao.getAllShoesData()\r\n            .indexOf(ShoesDataModel(0, \"\", \"\", null, null, newShoesData.shoesUrl))\r\n        val ordinaryData = mDao.getAllShoesData()[index] // 기존의 있던 신발 데이터를 읽어옴\r\n\r\n        if (newShoesData.shoesCategory != ordinaryData.shoesCategory) { // 카테고리가 바뀌었을 때\r\n            if (ordinaryData.shoesCategory == ShoesDataModel.CATEGORY_COMING_SOON) { // COMING SOON -> RELEASED\r\n                // TODO: 오류 수정 O\r\n                val newShoesPrice = try {\r\n                    ordinaryData.shoesPrice?.split(\"\\n\")?.get(1) // 신발 가격\r\n                } catch (e: ArrayIndexOutOfBoundsException) {\r\n                    e.printStackTrace()\r\n                    \"가격 : \"\r\n                }\r\n\r\n                mDao.updateShoesCategory(\r\n                    newShoesPrice,\r\n                    newShoesData.shoesCategory,\r\n                    ordinaryData.shoesUrl!!\r\n                )\r\n\r\n                deleteSpecialData(SpecialDataModel(0, ordinaryData.shoesUrl))\r\n            } else if (ordinaryData.shoesCategory == ShoesDataModel.CATEGORY_DRAW) { // DRAW -> DRAW END\r\n                val newShoesPrice = \"DRAW가 종료 되었습니다.\"\r\n\r\n                mDao.updateShoesCategory(\r\n                    newShoesPrice,\r\n                    newShoesData.shoesCategory,\r\n                    ordinaryData.shoesUrl!!\r\n                )\r\n                mDao.deleteSpecialData(newShoesData.shoesUrl!!)\r\n            }\r\n        }\r\n\r\n        if (newShoesData.shoesCategory == ShoesDataModel.CATEGORY_RELEASED) { // 출시 된 상품의 재고가 바뀌었을 때\r\n            if (ordinaryData.shoesPrice != ShoesDataModel.SHOES_SOLD_OUT && newShoesData.shoesPrice == ShoesDataModel.SHOES_SOLD_OUT) { // 재고가 다 떨어졌을 경우\r\n                mDao.updateShoesCategory(\r\n                    ShoesDataModel.SHOES_SOLD_OUT,\r\n                    ShoesDataModel.CATEGORY_RELEASED,\r\n                    ordinaryData.shoesUrl!!\r\n                )\r\n            } else if (ordinaryData.shoesPrice == ShoesDataModel.SHOES_SOLD_OUT && newShoesData.shoesPrice != ShoesDataModel.SHOES_SOLD_OUT) { // 재고가 다시 생긴 경우\r\n                mDao.updateShoesCategory(\r\n                    \"가격 : ${newShoesData.shoesPrice}\",\r\n                    ShoesDataModel.CATEGORY_RELEASED,\r\n                    ordinaryData.shoesUrl!!\r\n                )\r\n            }\r\n        }\r\n\r\n        if (newShoesData.shoesUrl != ordinaryData.shoesUrl) { // URL이 바뀌었을 시\r\n            mDao.updateShoesUrl(\r\n                newShoesData.shoesUrl,\r\n                ordinaryData.shoesUrl\r\n            )\r\n\r\n            if (mDao.existsSpecialData(ordinaryData.shoesUrl!!)) { // Special이 존재 할 시\r\n                mDao.updateSpecialDataUrl(newShoesData.shoesUrl!!, ordinaryData.shoesUrl)\r\n            }\r\n        }\r\n    }\r\n\r\n    private fun insertSpecialData(specialData: SpecialDataModel) {\r\n        mDao.insertSpecialData(specialData)\r\n    }\r\n\r\n    private fun deleteSpecialData(delete: SpecialDataModel) {\r\n        mDao.deleteSpecialData(delete.specialUrl)\r\n    }\r\n    // 데이터베이스 설정 끝\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/com/nikealarm/nikedrawalarm/component/worker/ParsingWorker.kt	(revision 40624f5d314db2cf370a48c0624bee3cbb9385a2)
+++ app/src/main/java/com/nikealarm/nikedrawalarm/component/worker/ParsingWorker.kt	(date 1613879311753)
@@ -300,7 +300,6 @@
 
         if (newShoesData.shoesCategory != ordinaryData.shoesCategory) { // 카테고리가 바뀌었을 때
             if (ordinaryData.shoesCategory == ShoesDataModel.CATEGORY_COMING_SOON) { // COMING SOON -> RELEASED
-                // TODO: 오류 수정 O
                 val newShoesPrice = try {
                     ordinaryData.shoesPrice?.split("\n")?.get(1) // 신발 가격
                 } catch (e: ArrayIndexOutOfBoundsException) {
