Index: app/src/main/java/com/nikealarm/nikedrawalarm/component/worker/ResetProductAlarmWorker.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.nikealarm.nikedrawalarm.component.worker\r\n\r\nimport android.app.AlarmManager\r\nimport android.app.PendingIntent\r\nimport android.content.Context\r\nimport android.content.Intent\r\nimport android.content.SharedPreferences\r\nimport android.os.Build\r\nimport android.util.Log\r\nimport androidx.hilt.Assisted\r\nimport androidx.hilt.work.WorkerInject\r\nimport androidx.work.Worker\r\nimport androidx.work.WorkerParameters\r\nimport com.nikealarm.nikedrawalarm.component.MyAlarmReceiver\r\nimport com.nikealarm.nikedrawalarm.database.Dao\r\nimport com.nikealarm.nikedrawalarm.database.MyDataBase\r\nimport com.nikealarm.nikedrawalarm.database.SpecialShoesDataModel\r\nimport com.nikealarm.nikedrawalarm.other.Contents\r\nimport javax.inject.Named\r\n\r\nclass ResetProductAlarmWorker @WorkerInject constructor(\r\n    @Assisted appContext: Context,\r\n    @Assisted workerParams: WorkerParameters,\r\n    @Named(Contents.PREFERENCE_NAME_TIME) val timePreferences: SharedPreferences,\r\n    @Named(Contents.PREFERENCE_NAME_ALLOW_ALARM) val allowAlarmPreferences: SharedPreferences,\r\n    val mDao: Dao\r\n) : Worker(appContext, workerParams) {\r\n\r\n    override fun doWork(): Result {\r\n        resetProductAlarm()\r\n        return Result.success()\r\n    }\r\n\r\n    private fun resetProductAlarm() {\r\n        for (position in mDao.getAllSpecialShoesData().indices) {\r\n            val shoesData = mDao.getAllSpecialShoesData()[position]\r\n            val preferenceKey = \"${shoesData.ShoesTitle}-${shoesData.ShoesSubTitle}\"\r\n            val timeTrigger = timePreferences.getLong(preferenceKey, 0)\r\n\r\n            if (timeTrigger != 0L) {\r\n                Log.i(\"CheckTime\", \"$timeTrigger\")\r\n                if (timeTrigger < System.currentTimeMillis()) {\r\n                    deleteDrawShoesData(shoesData)\r\n                    continue\r\n                }\r\n\r\n                val mAlarmManager =\r\n                    applicationContext.getSystemService(Context.ALARM_SERVICE) as AlarmManager\r\n\r\n                val reIntent = Intent(applicationContext, MyAlarmReceiver::class.java).apply {\r\n                    action = Contents.INTENT_ACTION_PRODUCT_ALARM\r\n                    putExtra(Contents.INTENT_KEY_POSITION, position)\r\n                }\r\n\r\n                val alarmPendingIntent = PendingIntent.getBroadcast(\r\n                    applicationContext,\r\n                    position,\r\n                    reIntent,\r\n                    PendingIntent.FLAG_UPDATE_CURRENT\r\n                )\r\n\r\n                if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.M) {\r\n                    mAlarmManager.setExactAndAllowWhileIdle(\r\n                        AlarmManager.RTC_WAKEUP,\r\n                        timeTrigger,\r\n                        alarmPendingIntent\r\n                    )\r\n                } else {\r\n                    mAlarmManager.setExact(\r\n                        AlarmManager.RTC_WAKEUP,\r\n                        timeTrigger,\r\n                        alarmPendingIntent\r\n                    )\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    private fun deleteDrawShoesData(data: SpecialShoesDataModel) {\r\n        with(timePreferences.edit()) {\r\n            remove(\"${data.ShoesTitle}-${data.ShoesSubTitle}\")\r\n            commit()\r\n        }\r\n\r\n        with(allowAlarmPreferences.edit()) {\r\n            remove(\"${data.ShoesTitle}-${data.ShoesSubTitle}\")\r\n            commit()\r\n        }\r\n\r\n        mDao.deleteSpecialData(data.ShoesUrl!!)\r\n    }\r\n}
===================================================================
--- app/src/main/java/com/nikealarm/nikedrawalarm/component/worker/ResetProductAlarmWorker.kt	(revision 2a4adaf47544d23e0e8bcddf3e1c5532f684ff3d)
+++ app/src/main/java/com/nikealarm/nikedrawalarm/component/ResetProductAlarmWorker.kt	(date 1604141532766)
@@ -1,4 +1,4 @@
-package com.nikealarm.nikedrawalarm.component.worker
+package com.nikealarm.nikedrawalarm.component
 
 import android.app.AlarmManager
 import android.app.PendingIntent
@@ -11,9 +11,7 @@
 import androidx.hilt.work.WorkerInject
 import androidx.work.Worker
 import androidx.work.WorkerParameters
-import com.nikealarm.nikedrawalarm.component.MyAlarmReceiver
 import com.nikealarm.nikedrawalarm.database.Dao
-import com.nikealarm.nikedrawalarm.database.MyDataBase
 import com.nikealarm.nikedrawalarm.database.SpecialShoesDataModel
 import com.nikealarm.nikedrawalarm.other.Contents
 import javax.inject.Named
Index: app/src/main/java/com/nikealarm/nikedrawalarm/other/di/AppModule.kt
===================================================================
--- app/src/main/java/com/nikealarm/nikedrawalarm/other/di/AppModule.kt	(revision 2a4adaf47544d23e0e8bcddf3e1c5532f684ff3d)
+++ app/src/main/java/com/nikealarm/nikedrawalarm/other/di/AppModule.kt	(revision 2a4adaf47544d23e0e8bcddf3e1c5532f684ff3d)
@@ -1,58 +0,0 @@
-package com.nikealarm.nikedrawalarm.other.di
-
-import android.content.Context
-import androidx.room.Room
-import com.nikealarm.nikedrawalarm.database.Dao
-import com.nikealarm.nikedrawalarm.database.MyDataBase
-import com.nikealarm.nikedrawalarm.other.Contents
-import com.nikealarm.nikedrawalarm.viewmodel.MyRepository
-import dagger.Module
-import dagger.Provides
-import dagger.hilt.InstallIn
-import dagger.hilt.android.components.ApplicationComponent
-import dagger.hilt.android.qualifiers.ApplicationContext
-import javax.inject.Named
-import javax.inject.Singleton
-
-@InstallIn(ApplicationComponent::class)
-@Module
-object AppModule {
-
-    @Singleton
-    @Provides
-    @Named(Contents.PREFERENCE_NAME_TIME)
-    fun provideTimePreferences(@ApplicationContext context: Context) =
-        context.getSharedPreferences(
-            Contents.PREFERENCE_NAME_TIME,
-            Context.MODE_PRIVATE
-        )
-
-    @Singleton
-    @Provides
-    @Named(Contents.PREFERENCE_NAME_ALLOW_ALARM)
-    fun provideAllowAlarmPreferences(@ApplicationContext context: Context) =
-        context.getSharedPreferences(
-            Contents.PREFERENCE_NAME_ALLOW_ALARM,
-            Context.MODE_PRIVATE
-        )
-
-    @Singleton
-    @Provides
-    fun provideDatabase(@ApplicationContext context: Context) =
-        Room.databaseBuilder(
-            context,
-            MyDataBase::class.java,
-            "database"
-            )
-            .fallbackToDestructiveMigration()
-            .build()
-
-    @Singleton
-    @Provides
-    fun provideDao(database: MyDataBase) =
-        database.getDao()
-
-    @Provides
-    fun provideRepository(dao: Dao) =
-        MyRepository(dao)
-}
\ No newline at end of file
