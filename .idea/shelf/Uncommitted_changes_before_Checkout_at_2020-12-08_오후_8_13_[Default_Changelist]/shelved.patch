Index: app/src/main/res/xml/setting_screen.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"utf-8\"?>\r\n<PreferenceScreen xmlns:app=\"http://schemas.android.com/apk/res-auto\">\r\n\r\n    <PreferenceCategory\r\n        app:iconSpaceReserved=\"false\"\r\n        app:title=\"알림 설정\">\r\n\r\n        <SwitchPreferenceCompat\r\n            app:iconSpaceReserved=\"false\"\r\n            app:key=\"@string/setting_preference_switchKey\"\r\n            app:summary=\"새로운 DRAW가 생길 시 알림으로 알려줍니다.\"\r\n            app:title=\"DRAW 정보 받기\" />\r\n    </PreferenceCategory>\r\n\r\n    <PreferenceCategory\r\n        app:iconSpaceReserved=\"false\"\r\n        app:isPreferenceVisible=\"false\"\r\n        app:title=\"응모\">\r\n\r\n        <SwitchPreferenceCompat\r\n            app:iconSpaceReserved=\"false\"\r\n            app:key=\"@string/setting_preference_autoEnter\"\r\n            app:summary=\"자동응모 기능을 사용합니다.\"\r\n            app:title=\"자동응모 허용\" />\r\n\r\n        <Preference\r\n            app:enabled=\"false\"\r\n            app:iconSpaceReserved=\"false\"\r\n            app:key=\"@string/setting_preference_editInfo\"\r\n            app:summary=\"아이디 및 비밀번호를 수정합니다.\"\r\n            app:title=\"정보 수정\" />\r\n    </PreferenceCategory>\r\n\r\n    <PreferenceCategory\r\n        app:iconSpaceReserved=\"false\"\r\n        app:title=\"기타\">\r\n\r\n        <Preference\r\n            app:iconSpaceReserved=\"false\"\r\n            app:key=\"@string/setting_preference_email\"\r\n            app:title=\"문의하기\" />\r\n\r\n        <Preference\r\n            app:enabled=\"false\"\r\n            app:iconSpaceReserved=\"false\"\r\n            app:key=\"@string/setting_preference_version\"\r\n            app:title=\"버전\" />\r\n    </PreferenceCategory>\r\n</PreferenceScreen>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/res/xml/setting_screen.xml	(revision f5d28d3e67e13b1c413143c0044ad495b355be60)
+++ app/src/main/res/xml/setting_screen.xml	(date 1607425479008)
@@ -14,7 +14,6 @@
 
     <PreferenceCategory
         app:iconSpaceReserved="false"
-        app:isPreferenceVisible="false"
         app:title="응모">
 
         <SwitchPreferenceCompat
Index: app/src/main/res/layout/dialog_notification.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"utf-8\"?>\r\n<LinearLayout xmlns:android=\"http://schemas.android.com/apk/res/android\"\r\n    xmlns:app=\"http://schemas.android.com/apk/res-auto\"\r\n    xmlns:tools=\"http://schemas.android.com/tools\"\r\n    android:layout_width=\"wrap_content\"\r\n    android:layout_height=\"wrap_content\"\r\n    android:background=\"@drawable/dialog_shape\"\r\n    android:orientation=\"vertical\">\r\n\r\n    <androidx.constraintlayout.widget.ConstraintLayout\r\n        android:layout_width=\"wrap_content\"\r\n        android:layout_height=\"wrap_content\">\r\n\r\n        <TextView\r\n            android:id=\"@+id/notifyDialogFrag_titleText\"\r\n            android:layout_width=\"wrap_content\"\r\n            android:layout_height=\"wrap_content\"\r\n            android:layout_marginTop=\"10dp\"\r\n            android:textColor=\"#000000\"\r\n            android:textSize=\"28sp\"\r\n            android:textStyle=\"bold\"\r\n            app:layout_constraintEnd_toEndOf=\"parent\"\r\n            app:layout_constraintStart_toStartOf=\"parent\"\r\n            app:layout_constraintTop_toTopOf=\"parent\"\r\n            tools:text=\"종료\" />\r\n\r\n        <TextView\r\n            android:id=\"@+id/notifyDialogFrag_messageText\"\r\n            android:layout_width=\"wrap_content\"\r\n            android:layout_height=\"wrap_content\"\r\n            android:layout_marginStart=\"14dp\"\r\n            android:layout_marginTop=\"20dp\"\r\n            android:layout_marginEnd=\"14dp\"\r\n            android:layout_marginBottom=\"20dp\"\r\n            android:textSize=\"20sp\"\r\n            android:textStyle=\"bold\"\r\n            app:layout_constraintBottom_toTopOf=\"@+id/notifyDialogFrag_cancelButton\"\r\n            app:layout_constraintEnd_toEndOf=\"parent\"\r\n            app:layout_constraintStart_toStartOf=\"parent\"\r\n            app:layout_constraintTop_toBottomOf=\"@+id/notifyDialogFrag_view\"\r\n            tools:text=\"앱을 종료하시겠습니까?\" />\r\n\r\n        <View\r\n            android:id=\"@+id/notifyDialogFrag_view\"\r\n            android:layout_width=\"match_parent\"\r\n            android:layout_height=\"1dp\"\r\n            android:layout_marginTop=\"10dp\"\r\n            android:background=\"#eeeeee\"\r\n            app:layout_constraintEnd_toEndOf=\"parent\"\r\n            app:layout_constraintStart_toStartOf=\"parent\"\r\n            app:layout_constraintTop_toBottomOf=\"@+id/notifyDialogFrag_titleText\" />\r\n\r\n        <LinearLayout\r\n            android:layout_width=\"match_parent\"\r\n            android:layout_height=\"wrap_content\"\r\n            android:layout_marginTop=\"18dp\"\r\n            android:layout_marginBottom=\"18dp\"\r\n            android:orientation=\"horizontal\"\r\n            app:layout_constraintBottom_toBottomOf=\"parent\"\r\n            app:layout_constraintEnd_toEndOf=\"parent\"\r\n            app:layout_constraintStart_toStartOf=\"parent\"\r\n            app:layout_constraintTop_toBottomOf=\"@+id/notifyDialogFrag_messageText\">\r\n\r\n            <Button\r\n                android:id=\"@+id/notifyDialogFrag_cancelButton\"\r\n                android:layout_width=\"150dp\"\r\n                android:layout_height=\"60dp\"\r\n                android:layout_marginEnd=\"10dp\"\r\n                android:background=\"@drawable/dialog_cancel_button_shape\"\r\n                android:text=\"취소\"\r\n                android:textSize=\"20sp\"\r\n                app:layout_constraintBottom_toBottomOf=\"parent\"\r\n                app:layout_constraintEnd_toStartOf=\"@+id/notifyDialogFrag_checkButton\"\r\n                app:layout_constraintStart_toStartOf=\"parent\" />\r\n\r\n            <Button\r\n                android:id=\"@+id/notifyDialogFrag_checkButton\"\r\n                android:layout_width=\"150dp\"\r\n                android:layout_height=\"60dp\"\r\n                android:background=\"@drawable/dialog_check_button_shape\"\r\n                android:text=\"확인\"\r\n                android:textColor=\"#ffffff\"\r\n                android:textSize=\"20sp\"\r\n                app:layout_constraintBottom_toBottomOf=\"parent\"\r\n                app:layout_constraintEnd_toEndOf=\"parent\"\r\n                app:layout_constraintStart_toEndOf=\"@+id/notifyDialogFrag_cancelButton\" />\r\n        </LinearLayout>\r\n    </androidx.constraintlayout.widget.ConstraintLayout>\r\n</LinearLayout>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/res/layout/dialog_notification.xml	(revision f5d28d3e67e13b1c413143c0044ad495b355be60)
+++ app/src/main/res/layout/dialog_notification.xml	(date 1607425817526)
@@ -34,7 +34,7 @@
             android:layout_marginBottom="20dp"
             android:textSize="20sp"
             android:textStyle="bold"
-            app:layout_constraintBottom_toTopOf="@+id/notifyDialogFrag_cancelButton"
+            app:layout_constraintBottom_toTopOf="@id/notifyDialogFrag_cancelButton"
             app:layout_constraintEnd_toEndOf="parent"
             app:layout_constraintStart_toStartOf="parent"
             app:layout_constraintTop_toBottomOf="@+id/notifyDialogFrag_view"
Index: app/src/main/java/com/nikealarm/nikedrawalarm/component/worker/ParsingWorker.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.nikealarm.nikedrawalarm.component.worker\r\n\r\nimport android.content.Context\r\nimport android.util.Log\r\nimport androidx.hilt.Assisted\r\nimport androidx.hilt.work.WorkerInject\r\nimport androidx.work.Worker\r\nimport androidx.work.WorkerParameters\r\nimport androidx.work.workDataOf\r\nimport com.nikealarm.nikedrawalarm.database.Dao\r\nimport com.nikealarm.nikedrawalarm.database.SpecialDataModel\r\nimport com.nikealarm.nikedrawalarm.database.ShoesDataModel\r\nimport com.nikealarm.nikedrawalarm.other.Contents\r\nimport org.jsoup.Jsoup\r\n\r\nclass ParsingWorker @WorkerInject constructor(\r\n    @Assisted context: Context,\r\n    @Assisted workerParams: WorkerParameters,\r\n    val mDao: Dao\r\n) : Worker(\r\n    context,\r\n    workerParams\r\n) {\r\n\r\n    private val allShoesList = mutableListOf<ShoesDataModel>()\r\n\r\n    override fun doWork(): Result {\r\n        parsingData() // 데이터를 파싱함\r\n        if (isStopped) { // cancel 됐을 때\r\n            return Result.failure()\r\n        }\r\n\r\n        syncData() // 데이터를 갱신함\r\n\r\n        Log.i(\"CheckSize\", \"${mDao.getAllShoesData().size}\")\r\n        Log.i(\"CheckDrawSize\", \"${mDao.getAllSpecialData().size}\")\r\n        return Result.success()\r\n    }\r\n\r\n    // 데이터 파싱\r\n    private fun parsingData() {\r\n        parseReleasedData()\r\n        parseSpecialData()\r\n    }\r\n\r\n    // 데이터 갱신\r\n    private fun syncData() {\r\n        checkShoesData()\r\n        checkSpecialData()\r\n    }\r\n\r\n    // FEED 파싱\r\n    private fun parseReleasedData() {\r\n        val url = \"https://www.nike.com/kr/launch/\"\r\n        val doc = Jsoup.connect(url) // nike SNKRS창을 읽어옴\r\n            .userAgent(\"19.0.1.84.52\")\r\n            .get()\r\n\r\n        val elementsData = doc.select(\"li.launch-list-item\") // 여러개의 신발\r\n        var progress = 0.0\r\n\r\n        for (elementData in elementsData) {\r\n            if (isStopped) { // cancel 됐을 때\r\n                return\r\n            }\r\n\r\n            val shoesInfo = elementData.select(\"div.info-sect\") // 신발 정보\r\n                .select(\"div.btn-box\")\r\n                .select(\"span\")\r\n                .text()\r\n\r\n            if (shoesInfo == \"LEARN MORE\") {\r\n                progress += 2.5\r\n                setProgressAsync(workDataOf(Contents.WORKER_PARSING_DATA_OUTPUT_KEY to progress.toInt()))\r\n\r\n                continue\r\n            }\r\n\r\n            val shoesSubTitle = elementData.select(\"div.text-box\")\r\n                .select(\"p.txt-subject\")\r\n                .text()\r\n            val shoesTitle = elementData.select(\"div.text-box\")\r\n                .select(\"p.txt-description\")\r\n                .text()\r\n            val innerUrl =\r\n                \"https://www.nike.com\" + elementData.select(\"a\").attr(\"href\") // 해당 신발의 링크창을 읽어옴\r\n\r\n            if (mDao.existsShoesData(shoesTitle, shoesSubTitle, innerUrl)) { // 해당 데이터가 이미 존재 시\r\n                val category = when (shoesInfo) {\r\n                    \"THE DRAW 진행예정\", \"THE DRAW 응모하기\" -> ShoesDataModel.CATEGORY_DRAW\r\n                    \"THE DRAW 응모 마감\", \"THE DRAW 당첨 결과 확인\", \"THE DRAW 종료\" -> ShoesDataModel.CATEGORY_DRAW_END\r\n                    \"COMING SOON\" -> ShoesDataModel.CATEGORY_COMING_SOON\r\n                    else -> ShoesDataModel.CATEGORY_RELEASED\r\n                }\r\n\r\n                updateData(\r\n                    ShoesDataModel(\r\n                        0,\r\n                        shoesSubTitle,\r\n                        shoesTitle,\r\n                        shoesInfo,\r\n                        null,\r\n                        innerUrl,\r\n                        category\r\n                    )\r\n                )\r\n            } else { // 존재하지 않을 시\r\n                val innerDoc = Jsoup.connect(innerUrl)\r\n                    .userAgent(\"19.0.1.84.52\")\r\n                    .get()\r\n\r\n                // 신발 정보를 가져옴\r\n                val shoesPrice = \"가격 : \" + innerDoc.select(\"div.price\") // 신발 가격\r\n                    .text()\r\n\r\n                val shoesImageUrl = innerDoc.select(\"li.uk-width-1-2\") // 신발 이미지\r\n                    .select(\"img\")\r\n                    .eq(0)\r\n                    .attr(\"src\")\r\n\r\n                val insertShoesData: ShoesDataModel\r\n                when (shoesInfo) {\r\n                    \"THE DRAW 진행예정\", \"THE DRAW 응모하기\" -> { // DRAW\r\n                        val innerElementData = innerDoc.select(\"span.uk-text-bold\")\r\n\r\n                        var howToEvent = \"\" // 이벤트 참여방법\r\n                        for (j in 0..2) {\r\n                            howToEvent += innerElementData.select(\"p\")\r\n                                .eq(j)\r\n                                .text() + \"\\n\"\r\n                        }\r\n                        howToEvent += shoesPrice\r\n\r\n                        insertShoesData = ShoesDataModel(\r\n                            null,\r\n                            shoesSubTitle,\r\n                            shoesTitle,\r\n                            howToEvent,\r\n                            shoesImageUrl,\r\n                            innerUrl,\r\n                            ShoesDataModel.CATEGORY_DRAW\r\n                        )\r\n                    }\r\n                    \"THE DRAW 응모 마감\", \"THE DRAW 당첨 결과 확인\", \"THE DRAW 종료\" -> { // DRAW END\r\n                        insertShoesData = ShoesDataModel(\r\n                            null,\r\n                            shoesSubTitle,\r\n                            shoesTitle,\r\n                            \"DRAW가 종료 되었습니다.\",\r\n                            shoesImageUrl,\r\n                            innerUrl,\r\n                            ShoesDataModel.CATEGORY_DRAW_END\r\n                        )\r\n                    }\r\n                    \"COMING SOON\" -> { // COMING SOON\r\n                        val launchDate = \"${innerDoc.select(\"div.txt-date\").text()}\\n${shoesPrice}\"\r\n\r\n                        insertShoesData = ShoesDataModel(\r\n                            null,\r\n                            shoesSubTitle,\r\n                            shoesTitle,\r\n                            launchDate,\r\n                            shoesImageUrl,\r\n                            innerUrl,\r\n                            ShoesDataModel.CATEGORY_COMING_SOON\r\n                        )\r\n                    }\r\n                    else -> { // RELEASED\r\n                        val stock: String = if (shoesInfo == ShoesDataModel.SHOES_SOLD_OUT) {\r\n                            shoesInfo\r\n                        } else {\r\n                            shoesPrice\r\n                        }\r\n                        insertShoesData = ShoesDataModel(\r\n                            null,\r\n                            shoesSubTitle,\r\n                            shoesTitle,\r\n                            stock,\r\n                            shoesImageUrl,\r\n                            innerUrl,\r\n                            ShoesDataModel.CATEGORY_RELEASED\r\n                        )\r\n                    }\r\n                }\r\n\r\n                insertData(insertShoesData)\r\n            }\r\n\r\n\r\n            progress += 2.5\r\n\r\n            setProgressAsync(workDataOf(Contents.WORKER_PARSING_DATA_OUTPUT_KEY to progress.toInt()))\r\n            allShoesList.add(ShoesDataModel(0, shoesSubTitle, shoesTitle, null, null, innerUrl))\r\n        }\r\n    }\r\n\r\n    // UPCOMING 파싱\r\n    private fun parseSpecialData() {\r\n        val url = \"https://www.nike.com/kr/launch/?type=upcoming&activeDate=date-filter:AFTER\"\r\n        val doc = Jsoup.connect(url) // nike SNKRS창을 읽어옴\r\n            .userAgent(\"19.0.1.84.52\")\r\n            .get()\r\n        val elementsData = doc.select(\"li.launch-list-item\")\r\n\r\n        for (elementData in elementsData) {\r\n            if (isStopped) { // cancel 됐을 때\r\n                return\r\n            }\r\n\r\n            val category = elementData.select(\"div.info-sect\")\r\n                .select(\"div.btn-box\")\r\n                .select(\"span.btn-link\")\r\n                .text()\r\n            val specialUrl = \"https://www.nike.com\" + elementData.select(\"a\").attr(\"href\")\r\n\r\n            if (checkCategory(category) || mDao.existsSpecialData(specialUrl)) { // 이미 데이터 존재하지 않고 special이 아니면 continue\r\n                continue\r\n            }\r\n\r\n            val month = elementData.select(\"div.img-sect\")\r\n                .select(\"div.date\")\r\n                .select(\"span.month\")\r\n                .text()\r\n            val day = elementData.select(\"div.img-sect\")\r\n                .select(\"div.date\")\r\n                .select(\"span.day\")\r\n                .text()\r\n            val whenStartEvent = elementData.select(\"div.info-sect\")\r\n                .select(\"div.text-box\")\r\n                .select(\"p.txt-subject\")\r\n                .text()\r\n            val order = \"${month.split(\"월\")[0]}${day}\".toInt()\r\n\r\n            val specialData = SpecialDataModel(null, specialUrl, month, day, whenStartEvent, order)\r\n            insertSpecialData(specialData)\r\n        }\r\n    }\r\n\r\n    private fun checkCategory(category: String): Boolean {\r\n        return when (category) {\r\n            \"THE DRAW 진행예정\", \"COMING SOON\" -> {\r\n                false\r\n            }\r\n            else -> {\r\n                true\r\n            }\r\n        }\r\n    }\r\n\r\n    // 갱신 설정\r\n    // ShoesData 리스트를 갱신 함\r\n    private fun checkShoesData() {\r\n\r\n        if (allShoesList.size < mDao.getAllShoesData().size) {\r\n            for (shoesData in mDao.getAllShoesData()) {\r\n\r\n                if (!allShoesList.contains(shoesData)) {\r\n                    mDao.deleteShoesData(shoesData.shoesTitle, shoesData.shoesSubTitle)\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    // SpecialData 리스트를 갱신 함\r\n    private fun checkSpecialData() {\r\n        for (specialData in mDao.getAllSpecialData()) {\r\n\r\n            if (!allShoesList.contains(\r\n                    ShoesDataModel(\r\n                        0,\r\n                        \"\",\r\n                        \"\",\r\n                        null,\r\n                        null,\r\n                        specialData.specialUrl\r\n                    )\r\n                )\r\n            ) {\r\n                deleteSpecialData(specialData)\r\n            }\r\n        }\r\n    }\r\n    // 갱신 끝\r\n\r\n    // 데이터베이스 설정\r\n    private fun insertData(shoesData: ShoesDataModel) {\r\n        mDao.insertShoesData(shoesData)\r\n    }\r\n\r\n    private fun updateData(newShoesData: ShoesDataModel) {\r\n        val index = mDao.getAllShoesData()\r\n            .indexOf(ShoesDataModel(0, \"\", \"\", null, null, newShoesData.shoesUrl))\r\n        val ordinaryData = mDao.getAllShoesData()[index] // 기존의 있던 신발 데이터를 읽어옴\r\n\r\n        if (newShoesData.shoesCategory != ordinaryData.shoesCategory) { // 카테고리가 바뀌었을 때\r\n            if (ordinaryData.shoesCategory == ShoesDataModel.CATEGORY_COMING_SOON) { // CATEGORY -> RELEASED\r\n                val newShoesPrice = ordinaryData.shoesPrice?.split(\"\\n\")?.get(1) // 신발 가격\r\n\r\n                mDao.updateShoesCategory(\r\n                    newShoesPrice,\r\n                    newShoesData.shoesCategory,\r\n                    ordinaryData.shoesUrl!!\r\n                )\r\n\r\n                deleteSpecialData(SpecialDataModel(0, ordinaryData.shoesUrl))\r\n            } else if (ordinaryData.shoesCategory == ShoesDataModel.CATEGORY_DRAW) { // DRAW -> DRAW END\r\n                val newShoesPrice = \"DRAW가 종료 되었습니다.\"\r\n\r\n                mDao.updateShoesCategory(\r\n                    newShoesPrice,\r\n                    newShoesData.shoesCategory,\r\n                    ordinaryData.shoesUrl!!\r\n                )\r\n                mDao.deleteSpecialData(newShoesData.shoesUrl!!)\r\n            }\r\n        }\r\n\r\n        if (newShoesData.shoesCategory == ShoesDataModel.CATEGORY_RELEASED) { // 출시 된 상품의 재고가 바뀌었을 때\r\n            if (ordinaryData.shoesPrice != ShoesDataModel.SHOES_SOLD_OUT && newShoesData.shoesPrice == ShoesDataModel.SHOES_SOLD_OUT) { // 재고가 다 떨어졌을 경우\r\n                mDao.updateShoesCategory(\r\n                    ShoesDataModel.SHOES_SOLD_OUT,\r\n                    ShoesDataModel.CATEGORY_RELEASED,\r\n                    ordinaryData.shoesUrl!!\r\n                )\r\n            } else if (ordinaryData.shoesPrice == ShoesDataModel.SHOES_SOLD_OUT && newShoesData.shoesPrice != ShoesDataModel.SHOES_SOLD_OUT) { // 재고가 다시 생긴 경우\r\n                mDao.updateShoesCategory(\r\n                    \"가격 : ${newShoesData.shoesPrice}\",\r\n                    ShoesDataModel.CATEGORY_RELEASED,\r\n                    ordinaryData.shoesUrl!!\r\n                )\r\n            }\r\n        }\r\n\r\n        if (newShoesData.shoesUrl != ordinaryData.shoesUrl) { // URL이 바뀌었을 시\r\n            mDao.updateShoesUrl(newShoesData.shoesUrl, ordinaryData.shoesUrl)\r\n\r\n            if (mDao.existsSpecialData(ordinaryData.shoesUrl!!)) { // Special이 존재 할 시\r\n                mDao.updateSpecialDataUrl(newShoesData.shoesUrl!!, ordinaryData.shoesUrl)\r\n            }\r\n        }\r\n    }\r\n\r\n    private fun insertSpecialData(specialData: SpecialDataModel) {\r\n        mDao.insertSpecialData(specialData)\r\n    }\r\n\r\n    private fun deleteSpecialData(delete: SpecialDataModel) {\r\n        mDao.deleteSpecialData(delete.specialUrl)\r\n    }\r\n    // 데이터베이스 설정 끝\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/com/nikealarm/nikedrawalarm/component/worker/ParsingWorker.kt	(revision f5d28d3e67e13b1c413143c0044ad495b355be60)
+++ app/src/main/java/com/nikealarm/nikedrawalarm/component/worker/ParsingWorker.kt	(date 1607425516484)
@@ -332,7 +332,10 @@
         }
 
         if (newShoesData.shoesUrl != ordinaryData.shoesUrl) { // URL이 바뀌었을 시
-            mDao.updateShoesUrl(newShoesData.shoesUrl, ordinaryData.shoesUrl)
+            mDao.updateShoesUrl(
+                newShoesData.shoesUrl,
+                ordinaryData.shoesUrl
+            )
 
             if (mDao.existsSpecialData(ordinaryData.shoesUrl!!)) { // Special이 존재 할 시
                 mDao.updateSpecialDataUrl(newShoesData.shoesUrl!!, ordinaryData.shoesUrl)
Index: app/src/main/java/com/nikealarm/nikedrawalarm/component/worker/FindDrawWorker.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.nikealarm.nikedrawalarm.component.worker\r\n\r\nimport android.app.NotificationChannel\r\nimport android.app.NotificationManager\r\nimport android.app.PendingIntent\r\nimport android.content.Context\r\nimport android.content.Intent\r\nimport android.os.Build\r\nimport androidx.core.app.NotificationCompat\r\nimport androidx.core.app.NotificationManagerCompat\r\nimport androidx.hilt.Assisted\r\nimport androidx.hilt.work.WorkerInject\r\nimport androidx.work.Worker\r\nimport androidx.work.WorkerParameters\r\nimport com.nikealarm.nikedrawalarm.R\r\nimport com.nikealarm.nikedrawalarm.database.*\r\nimport com.nikealarm.nikedrawalarm.other.Contents\r\nimport com.nikealarm.nikedrawalarm.ui.MainActivity\r\nimport com.squareup.picasso.Picasso\r\nimport org.jsoup.Jsoup\r\n\r\nclass FindDrawWorker @WorkerInject constructor(\r\n    @Assisted context: Context,\r\n    @Assisted workerParams: WorkerParameters,\r\n    val mDao: Dao\r\n) : Worker(\r\n    context,\r\n    workerParams\r\n) {\r\n    private val mContext = context\r\n\r\n    private val allShoesList = mutableListOf<ShoesDataModel>()\r\n\r\n    override fun doWork(): Result {\r\n        parseData()\r\n\r\n        return Result.success()\r\n    }\r\n\r\n    // 크롤링\r\n    private fun parseData() {\r\n        parseReleasedData()\r\n        parseSpecialData()\r\n\r\n        checkSpecialData()\r\n    }\r\n\r\n    // FEED 파싱\r\n    private fun parseReleasedData() {\r\n        val url = \"https://www.nike.com/kr/launch/?type=feed\"\r\n        val doc = Jsoup.connect(url) // nike UPCOMING 창을 읽어옴\r\n            .userAgent(\"19.0.1.84.52\")\r\n            .get()\r\n        val elementsData = doc.select(\"div.launch-list-item\")\r\n\r\n        for (elementData in elementsData) {\r\n            val shoesInfo = elementData.select(\"div.info-sect\") // 신발 정보\r\n                .select(\"div.btn-box\")\r\n                .select(\"span\")\r\n                .text()\r\n\r\n            if (shoesInfo == \"LEARN MORE\") {\r\n                continue\r\n            }\r\n\r\n            val shoesSubTitle = elementData.select(\"div.text-box\")\r\n                .select(\"p.txt-subject\")\r\n                .text()\r\n            val shoesTitle = elementData.select(\"div.text-box\")\r\n                .select(\"p.txt-description\")\r\n                .text()\r\n            val innerUrl = \"https://www.nike.com\" + elementData.select(\"a\")\r\n                .attr(\"href\") // 해당 draw 링크창을 읽어옴\r\n\r\n            // draw가 없을 시\r\n            if (!mDao.existsShoesData(shoesTitle, shoesSubTitle, innerUrl)) {\r\n                if (shoesInfo == \"THE DRAW 진행예정\") {\r\n                    val innerDoc = Jsoup.connect(innerUrl)\r\n                        .userAgent(\"19.0.1.84.52\")\r\n                        .get()\r\n\r\n                    // 신발 정보를 가져옴\r\n                    val shoesPrice = \"가격 : \" + innerDoc.select(\"div.price\") // draw 신발 가격\r\n                        .text()\r\n                    val shoesImageUrl = innerDoc.select(\"li.uk-width-1-2\") // draw 신발 이미지\r\n                        .select(\"img\")\r\n                        .eq(0)\r\n                        .attr(\"src\")\r\n\r\n                    val innerElementData = innerDoc.select(\"span.uk-text-bold\")\r\n\r\n                    var howToEvent = \"\" // 이벤트 참여방법\r\n                    for (j in 0..2) {\r\n                        howToEvent += innerElementData.select(\"p\")\r\n                            .eq(j)\r\n                            .text() + \"\\n\"\r\n                    }\r\n\r\n                    howToEvent += shoesPrice\r\n\r\n                    val shoesData =\r\n                        ShoesDataModel(\r\n                            null,\r\n                            shoesSubTitle,\r\n                            shoesTitle,\r\n                            howToEvent,\r\n                            shoesImageUrl,\r\n                            innerUrl,\r\n                            ShoesDataModel.CATEGORY_DRAW\r\n                        )\r\n\r\n                    insertShoesData(shoesData)\r\n                }\r\n            }\r\n\r\n            allShoesList.add(ShoesDataModel(0, shoesSubTitle, shoesTitle, null, null, innerUrl))\r\n        }\r\n    }\r\n\r\n    // UPCOMING 파싱\r\n    private fun parseSpecialData() {\r\n        val url = \"https://www.nike.com/kr/launch/?type=upcoming&activeDate=date-filter:AFTER\"\r\n        val doc = Jsoup.connect(url) // nike UPCOMING창을 읽어옴\r\n            .userAgent(\"19.0.1.84.52\")\r\n            .get()\r\n        val elementsData = doc.select(\"div.launch-list-item\")\r\n        var channelId = 0\r\n\r\n        for (elementData in elementsData) {\r\n            val category = elementData.select(\"div.info-sect\")\r\n                .select(\"div.btn-box\")\r\n                .select(\"span.btn-link\")\r\n                .text()\r\n            val specialUrl = \"https://www.nike.com\" + elementData.select(\"a\").attr(\"href\")\r\n\r\n            if (category != \"THE DRAW 진행예정\" || mDao.existsSpecialData(specialUrl)) { // DRAW가 아니고 이미 데이터가 존재할 시\r\n                continue\r\n            }\r\n\r\n            val month = elementData.select(\"div.img-sect\")\r\n                .select(\"div.date\")\r\n                .select(\"span.month\")\r\n                .text()\r\n            val day = elementData.select(\"div.img-sect\")\r\n                .select(\"div.date\")\r\n                .select(\"span.day\")\r\n                .text()\r\n            val whenStartEvent = elementData.select(\"div.info-sect\")\r\n                .select(\"div.text-box\")\r\n                .select(\"p.txt-subject\")\r\n                .text()\r\n            val order = \"${month.split(\"월\")[0]}${day}\".toInt()\r\n\r\n            val specialShoesData = SpecialDataModel(\r\n                null,\r\n                specialUrl,\r\n                month,\r\n                day,\r\n                whenStartEvent,\r\n                order\r\n            )\r\n\r\n            insertSpecialShoesData(specialShoesData)\r\n\r\n            val index = mDao.getAllSpecialShoesData()\r\n                .indexOf(SpecialShoesDataModel(0, \"\", \"\", null, null, specialUrl))\r\n            createNotification(mDao.getAllSpecialShoesData()[index], channelId)\r\n\r\n            channelId++\r\n        }\r\n    }\r\n\r\n    // 알림 생성\r\n    private fun createNotification(data: SpecialShoesDataModel, channelId: Int) {\r\n        val vibrate = LongArray(4).apply {\r\n            set(0, 0)\r\n            set(1, 100)\r\n            set(2, 200)\r\n            set(3, 300)\r\n        }\r\n\r\n        // 자세히 보기\r\n        val learnMoreIntent = Intent(mContext, MainActivity::class.java).apply {\r\n            action = Contents.INTENT_ACTION_GOTO_WEBSITE\r\n            putExtra(Contents.CHANNEL_ID, channelId)\r\n            putExtra(Contents.DRAW_URL, data.ShoesUrl)\r\n        }\r\n        val setAlarmIntent = Intent(mContext, MainActivity::class.java).apply { // 알림 설정하기\r\n            action = Contents.INTENT_ACTION_GOTO_DRAWLIST\r\n        }\r\n\r\n        val learnMorePendingIntent = PendingIntent.getActivity(\r\n            mContext,\r\n            channelId,\r\n            learnMoreIntent,\r\n            PendingIntent.FLAG_ONE_SHOT\r\n        )\r\n        val setAlarmPendingIntent =\r\n            PendingIntent.getActivity(mContext, 100, setAlarmIntent, PendingIntent.FLAG_ONE_SHOT)\r\n\r\n        val bitmap = Picasso.get().load(data.ShoesImageUrl).get()\r\n        val notificationBuilder = NotificationCompat.Builder(mContext, \"Default\")\r\n            .setSmallIcon(R.mipmap.ic_launcher)\r\n            .setContentTitle(\"${data.ShoesSubTitle} - ${data.ShoesTitle}\")\r\n            .setVibrate(vibrate)\r\n            .setLargeIcon(bitmap)\r\n            .setStyle(NotificationCompat.BigTextStyle())\r\n            .setStyle(\r\n                NotificationCompat.BigPictureStyle()\r\n                    .bigPicture(bitmap)\r\n                    .bigLargeIcon(null)\r\n            )\r\n            .setContentText(data.ShoesPrice!!.split(\"\\n\")[0])\r\n            .setAutoCancel(true)\r\n            .addAction(0, \"자세히 보기\", learnMorePendingIntent)\r\n            .addAction(0, \"알림 설정하기\", setAlarmPendingIntent)\r\n\r\n        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.O) {\r\n            val channel = NotificationChannel(\r\n                \"Default\",\r\n                data.ShoesTitle,\r\n                NotificationManager.IMPORTANCE_DEFAULT\r\n            )\r\n            val notificationManager =\r\n                mContext.getSystemService(Context.NOTIFICATION_SERVICE) as NotificationManager\r\n\r\n            notificationManager.createNotificationChannel(channel)\r\n        }\r\n\r\n        with(NotificationManagerCompat.from(mContext)) {\r\n            notify(channelId, notificationBuilder.build())\r\n        }\r\n    }\r\n\r\n    // 데이터베이스 접근\r\n    private fun insertSpecialShoesData(insertData: SpecialDataModel) {\r\n        mDao.insertSpecialData(insertData)\r\n    }\r\n\r\n    private fun insertShoesData(insertData: ShoesDataModel) {\r\n        mDao.insertShoesData(insertData)\r\n    }\r\n\r\n    private fun checkSpecialData() {\r\n        for (shoesData in mDao.getAllSpecialShoesData()) {\r\n            if (!allShoesList.contains(\r\n                    ShoesDataModel(\r\n                        0,\r\n                        shoesData.ShoesSubTitle,\r\n                        shoesData.ShoesTitle\r\n                    )\r\n                ) && shoesData.ShoesCategory == ShoesDataModel.CATEGORY_DRAW\r\n            ) {\r\n                deleteShoesData(shoesData)\r\n            }\r\n        }\r\n    }\r\n\r\n    private fun deleteShoesData(deleteData: SpecialShoesDataModel) {\r\n        mDao.deleteShoesData(deleteData.ShoesTitle, deleteData.ShoesSubTitle)\r\n        mDao.deleteSpecialData(deleteData.ShoesUrl!!)\r\n    }\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/com/nikealarm/nikedrawalarm/component/worker/FindDrawWorker.kt	(revision f5d28d3e67e13b1c413143c0044ad495b355be60)
+++ app/src/main/java/com/nikealarm/nikedrawalarm/component/worker/FindDrawWorker.kt	(date 1607425555429)
@@ -47,11 +47,11 @@
 
     // FEED 파싱
     private fun parseReleasedData() {
-        val url = "https://www.nike.com/kr/launch/?type=feed"
+        val url = "https://www.nike.com/kr/launch/"
         val doc = Jsoup.connect(url) // nike UPCOMING 창을 읽어옴
             .userAgent("19.0.1.84.52")
             .get()
-        val elementsData = doc.select("div.launch-list-item")
+        val elementsData = doc.select("li.launch-list-item")
 
         for (elementData in elementsData) {
             val shoesInfo = elementData.select("div.info-sect") // 신발 정보
@@ -123,7 +123,7 @@
         val doc = Jsoup.connect(url) // nike UPCOMING창을 읽어옴
             .userAgent("19.0.1.84.52")
             .get()
-        val elementsData = doc.select("div.launch-list-item")
+        val elementsData = doc.select("ls.launch-list-item")
         var channelId = 0
 
         for (elementData in elementsData) {
@@ -133,7 +133,7 @@
                 .text()
             val specialUrl = "https://www.nike.com" + elementData.select("a").attr("href")
 
-            if (category != "THE DRAW 진행예정" || mDao.existsSpecialData(specialUrl)) { // DRAW가 아니고 이미 데이터가 존재할 시
+            if (category != "THE DRAW 진행예정" || mDao.existsSpecialData(specialUrl)) { // DRAW가 아니거나 이미 데이터가 존재할 시
                 continue
             }
 
diff --git .idea/shelf/Uncommitted_changes_before_Checkout_at_2020-12-08__7_23__Default_Changelist_.xml .idea/shelf/Uncommitted_changes_before_Checkout_at_2020-12-08__7_23__Default_Changelist_.xml
diff --git .idea/shelf/Uncommitted_changes_before_Checkout_at_2020-12-08__7_23__Default_Changelist_1.xml .idea/shelf/Uncommitted_changes_before_Checkout_at_2020-12-08__7_23__Default_Changelist_1.xml
diff --git .idea/shelf/Uncommitted_changes_before_Checkout_at_2020-12-08__7_19__Default_Changelist_.xml .idea/shelf/Uncommitted_changes_before_Checkout_at_2020-12-08__7_19__Default_Changelist_.xml
diff --git .idea/shelf/Uncommitted_changes_before_Checkout_at_2020-12-08__7_19__Default_Changelist_1.xml .idea/shelf/Uncommitted_changes_before_Checkout_at_2020-12-08__7_19__Default_Changelist_1.xml
